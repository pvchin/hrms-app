{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\PayslipTableView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { payPeriodState, payPeriodEndMonthState, payPeriodEmpIdState } from \"./data/atomdata\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTERSTRING = \"Pending\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\"\n}, {\n  title: \"Period\",\n  field: \"period\",\n  editable: \"never\"\n}, {\n  title: \"Date\",\n  field: \"date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"Nett Pay\",\n  field: \"nett_pay\",\n  type: \"currency\",\n  editable: \"never\"\n}, // { title: \"Bank Name\", field: \"bank_name\" },\n// { title: \"Bank AC No\", field: \"bank_accno\" },\n{\n  title: \"Status\",\n  field: \"status\",\n  editable: \"never\"\n}];\nexport default function AllEmployeesTable() {\n  _s();\n\n  let history = useHistory();\n  const classes = useStyles();\n  const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\n  const {\n    payslips,\n    addPayslip,\n    payslips_loading,\n    updatePayslip,\n    deletePayslip,\n    loadPendingPayslips,\n    getSinglePayslip,\n    getSingleBatchPayslip,\n    setEditPayslipID,\n    setIsPayslipEditingOn,\n    setIsPayslipEditingOff,\n    resetSinglePayslip,\n    payslip_period,\n    payslip_endmonthdate,\n    singlebatchpayslip,\n    singlebatch_payslip_loading,\n    singlebatch_payslip_error\n  } = usePayslipsContext();\n  const {\n    loadEmployees,\n    employees\n  } = useEmployeesContext();\n  useEffect(() => {\n    loadPendingPayslips(FILTERSTRING);\n  }, []);\n\n  const update_Payslip = async data => {\n    const {\n      id\n    } = data;\n    setPayPeriodEmpId(id); //save to recoil\n\n    setEditPayslipID(id);\n    setIsPayslipEditingOn();\n    getSinglePayslip(id);\n    history.push(\"/singlepayslip\");\n  };\n\n  const add_Payslip = async data => {\n    const {\n      id\n    } = data;\n    resetSinglePayslip();\n    setEditPayslipID(\"\");\n    setIsPayslipEditingOff();\n    history.push(\"/singlepayslip\");\n  };\n\n  const delete_Payslip = data => {\n    const {\n      id\n    } = data;\n    setEditPayslipID(id);\n    deletePayslip(id);\n    loadPendingPayslips(FILTERSTRING);\n  };\n\n  const build_Payslip = () => {\n    const current_period = payslip_period;\n    const current_endmonthdate = Date.parse(payslip_endmonthdate); // loadEmployees();\n\n    console.log(current_period);\n    getSingleBatchPayslip(payslip_period);\n    const paydata = singlebatchpayslip.map(e => e.name) || [];\n    {\n      employees.map(emp => {\n        const {\n          id,\n          name,\n          bank_name,\n          bank_acno,\n          basic_salary,\n          nett_pay,\n          tap_acno,\n          tap_amount,\n          scp_acno,\n          scp_amount\n        } = emp;\n        const data = {\n          name: name,\n          period: current_period,\n          date: current_endmonthdate,\n          basic_pay: basic_salary,\n          nett_pay: nett_pay,\n          bank_name: bank_name,\n          bank_acno: bank_acno,\n          tap_acno: tap_acno,\n          tap_amount: tap_amount,\n          scp_acno: scp_acno,\n          scp_amount: scp_amount,\n          empid: id,\n          status: \"Pending\"\n        };\n\n        if (paydata) {\n          const res = paydata.includes(emp.name);\n\n          if (!res) {\n            console.log(\"add\", data);\n            addPayslip({ ...data\n            });\n          } else {\n            addPayslip({ ...data\n            });\n          }\n        }\n      });\n    }\n    getSingleBatchPayslip(payslip_period);\n  };\n\n  if (singlebatch_payslip_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading.....Payslips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: payslips,\n        title: \"Payslips\",\n        options: {\n          filtering: false,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"#FFF\"\n          },\n          showTitle: false\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllEmployeesTable, \"Vals/cySjhhx49msA1meZwOg7Ig=\", false, function () {\n  return [useHistory, useStyles, useSetRecoilState, usePayslipsContext, useEmployeesContext];\n});\n\n_c = AllEmployeesTable;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"AllEmployeesTable\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/PayslipTableView.js"],"names":["React","useEffect","MaterialTable","MTableToolbar","makeStyles","useHistory","Link","useSetRecoilState","useRecoilValue","payPeriodState","payPeriodEndMonthState","payPeriodEmpIdState","usePayslipsContext","useEmployeesContext","FILTERSTRING","columns","title","field","editable","type","dateSetting","locale","AllEmployeesTable","history","classes","useStyles","setPayPeriodEmpId","payslips","addPayslip","payslips_loading","updatePayslip","deletePayslip","loadPendingPayslips","getSinglePayslip","getSingleBatchPayslip","setEditPayslipID","setIsPayslipEditingOn","setIsPayslipEditingOff","resetSinglePayslip","payslip_period","payslip_endmonthdate","singlebatchpayslip","singlebatch_payslip_loading","singlebatch_payslip_error","loadEmployees","employees","update_Payslip","data","id","push","add_Payslip","delete_Payslip","build_Payslip","current_period","current_endmonthdate","Date","parse","console","log","paydata","map","e","name","emp","bank_name","bank_acno","basic_salary","nett_pay","tap_acno","tap_amount","scp_acno","scp_amount","period","date","basic_pay","empid","status","res","includes","root","maxWidth","paddingTop","filtering","headerStyle","backgroundColor","color","showTitle","theme","padding"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Period\", field: \"period\", editable: \"never\" },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n   \r\n  { title: \"Nett Pay\", field: \"nett_pay\", type: \"currency\", editable: \"never\" },\r\n  // { title: \"Bank Name\", field: \"bank_name\" },\r\n  // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n  { title: \"Status\", field: \"status\", editable: \"never\" },\r\n];\r\n\r\nexport default function AllEmployeesTable() {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  const {\r\n    payslips,\r\n    addPayslip,\r\n    payslips_loading,\r\n    updatePayslip,\r\n    deletePayslip,\r\n    loadPendingPayslips,\r\n    getSinglePayslip,\r\n    getSingleBatchPayslip,\r\n    setEditPayslipID,\r\n    setIsPayslipEditingOn,\r\n    setIsPayslipEditingOff,\r\n    resetSinglePayslip,\r\n    payslip_period,\r\n    payslip_endmonthdate,\r\n    singlebatchpayslip,\r\n    singlebatch_payslip_loading,\r\n    singlebatch_payslip_error,\r\n  } = usePayslipsContext();\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    loadPendingPayslips(FILTERSTRING);\r\n  }, []);\r\n\r\n  const update_Payslip = async (data) => {\r\n    const { id } = data;\r\n    setPayPeriodEmpId(id); //save to recoil\r\n    setEditPayslipID(id);\r\n    setIsPayslipEditingOn();\r\n    getSinglePayslip(id);\r\n    history.push(\"/singlepayslip\");\r\n  };\r\n\r\n  const add_Payslip = async (data) => {\r\n    const { id } = data;\r\n    resetSinglePayslip();\r\n    setEditPayslipID(\"\");\r\n    setIsPayslipEditingOff();\r\n    history.push(\"/singlepayslip\");\r\n  };\r\n\r\n  const delete_Payslip = (data) => {\r\n    const { id } = data;\r\n    setEditPayslipID(id);\r\n    deletePayslip(id);\r\n    loadPendingPayslips(FILTERSTRING);\r\n  };\r\n\r\n  const build_Payslip = () => {\r\n    const current_period = payslip_period;\r\n    const current_endmonthdate = Date.parse(payslip_endmonthdate);\r\n\r\n    // loadEmployees();\r\n    console.log(current_period);\r\n    getSingleBatchPayslip(payslip_period);\r\n    const paydata = singlebatchpayslip.map((e) => e.name) || [];\r\n\r\n    {\r\n      employees.map((emp) => {\r\n        const {\r\n          id,\r\n          name,\r\n          bank_name,\r\n          bank_acno,\r\n          basic_salary,\r\n          nett_pay,\r\n          tap_acno,\r\n          tap_amount,\r\n          scp_acno,\r\n          scp_amount,\r\n        } = emp;\r\n        const data = {\r\n          name: name,\r\n          period: current_period,\r\n          date: current_endmonthdate,\r\n          basic_pay: basic_salary,\r\n          nett_pay: nett_pay,\r\n          bank_name: bank_name,\r\n          bank_acno: bank_acno,\r\n          tap_acno: tap_acno,\r\n          tap_amount: tap_amount,\r\n          scp_acno: scp_acno,\r\n          scp_amount: scp_amount,\r\n          empid: id,\r\n          status: \"Pending\",\r\n        };\r\n        if (paydata) {\r\n          const res = paydata.includes(emp.name);\r\n          if (!res) {\r\n            console.log(\"add\", data);\r\n            addPayslip({ ...data });\r\n          } else {\r\n            addPayslip({ ...data });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    getSingleBatchPayslip(payslip_period);\r\n  };\r\n\r\n  if (singlebatch_payslip_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading.....Payslips</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payslips}\r\n          title=\"Payslips\"\r\n          options={{\r\n            filtering: false,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: false,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}