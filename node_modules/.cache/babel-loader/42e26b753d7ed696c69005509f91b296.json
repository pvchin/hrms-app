{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\Emp_Experiences.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Company\",\n  field: \"company\"\n}, {\n  title: \"Location\",\n  field: \"location\"\n}, {\n  title: \"Position\",\n  field: \"position\"\n}, {\n  title: \"From Date\",\n  field: \"from_date\",\n  type: \"date\"\n}, {\n  title: \"To Date\",\n  field: \"to_date\",\n  type: \"date\"\n}, {\n  title: \"Remark\",\n  field: \"remark\"\n}];\nexport default function Emp_Experiences() {\n  _s();\n\n  let history = useHistory();\n  const classes = useStyles();\n  const {\n    editEmployeeID\n  } = useEmployeesContext();\n  const {\n    loadSingleBatchExperience,\n    singlebatchexperience,\n    addExperience,\n    deleteExperience,\n    updateExperience,\n    singlebatch_experience_loading,\n    singlebatch_experience_error\n  } = useTablesContext();\n  useEffect(() => {}, [experiencedata]);\n\n  const Save_ExperienceData = () => {\n    console.log(experiencedata); // delete existing data\n\n    {\n      singlebatchexperience.map(f => {\n        const {\n          id\n        } = f;\n        deleteExperience(id);\n      });\n    } //add new data\n\n    {\n      experiencedata.map(data => {\n        const {\n          name,\n          relationship,\n          birth_date,\n          phone,\n          age\n        } = data;\n        addFamily({\n          name,\n          relationship,\n          birth_date,\n          phone,\n          age,\n          empid: editEmployeeID\n        });\n      });\n    }\n    loadSingleBatchFamily(editEmployeeID);\n    handleDialogClose();\n  };\n\n  const update_Experience = data => {\n    const {\n      id,\n      rec_id,\n      ...fields\n    } = data;\n    updateExperience({\n      id,\n      ...fields\n    });\n    loadSingleBatchExperience(editEmployeeID);\n  };\n\n  const add_Experience = data => {\n    addExperience({ ...data,\n      empid: editEmployeeID\n    });\n    loadSingleBatchExperience(editEmployeeID);\n  };\n\n  const delete_Experience = data => {\n    const {\n      id\n    } = data;\n    deleteExperience(id);\n    loadSingleBatchExperience(editEmployeeID);\n  };\n\n  if (singlebatch_experience_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading...Experience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: singlebatchexperience,\n        title: \"Experience\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              add_Experience(newData);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              update_Experience(newData);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              delete_Experience(oldData);\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"primary\"\n          },\n          showTitle: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Emp_Experiences, \"Z3yw3zLhEet29XxDscdI6jYREmA=\", false, function () {\n  return [useHistory, useStyles, useEmployeesContext, useTablesContext];\n});\n\n_c = Emp_Experiences;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Emp_Experiences\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/Emp_Experiences.js"],"names":["React","useEffect","MaterialTable","makeStyles","useHistory","Link","useEmployeesContext","useTablesContext","columns","title","field","type","Emp_Experiences","history","classes","useStyles","editEmployeeID","loadSingleBatchExperience","singlebatchexperience","addExperience","deleteExperience","updateExperience","singlebatch_experience_loading","singlebatch_experience_error","experiencedata","Save_ExperienceData","console","log","map","f","id","data","name","relationship","birth_date","phone","age","addFamily","empid","loadSingleBatchFamily","handleDialogClose","update_Experience","rec_id","fields","add_Experience","delete_Experience","root","maxWidth","paddingTop","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","filtering","headerStyle","backgroundColor","color","showTitle","theme","padding"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CADc,EAKd;AACED,EAAAA,KAAK,EAAE,UADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CALc,EASd;AACED,EAAAA,KAAK,EAAE,UADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CATc,EAad;AACED,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,KAAK,EAAE,WAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CAbc,EAkBd;AACEF,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CAlBc,EAuBd;AAAEF,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAvBc,CAAhB;AA0BA,eAAe,SAASE,eAAT,GAA2B;AAAA;;AACxC,MAAIC,OAAO,GAAGT,UAAU,EAAxB;AACA,QAAMU,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAqBV,mBAAmB,EAA9C;AACA,QAAM;AACJW,IAAAA,yBADI;AAEJC,IAAAA,qBAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,8BANI;AAOJC,IAAAA;AAPI,MAQFhB,gBAAgB,EARpB;AAUDN,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACuB,cAAD,CAAX,CAAT;;AAEA,QAAMC,mBAAmB,GAAG,MAAM;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ,EADgC,CAEhC;;AACA;AACEN,MAAAA,qBAAqB,CAACU,GAAtB,CAA2BC,CAAD,IAAO;AAC/B,cAAM;AAAEC,UAAAA;AAAF,YAASD,CAAf;AACAT,QAAAA,gBAAgB,CAACU,EAAD,CAAhB;AACD,OAHD;AAID,KAR+B,CAShC;;AACA;AACEN,MAAAA,cAAc,CAACI,GAAf,CAAoBG,IAAD,IAAU;AAC3B,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,YAAR;AAAsBC,UAAAA,UAAtB;AAAkCC,UAAAA,KAAlC;AAAyCC,UAAAA;AAAzC,YAAiDL,IAAvD;AACAM,QAAAA,SAAS,CAAC;AACRL,UAAAA,IADQ;AAERC,UAAAA,YAFQ;AAGRC,UAAAA,UAHQ;AAIRC,UAAAA,KAJQ;AAKRC,UAAAA,GALQ;AAMRE,UAAAA,KAAK,EAAEtB;AANC,SAAD,CAAT;AAQD,OAVD;AAWD;AACDuB,IAAAA,qBAAqB,CAACvB,cAAD,CAArB;AACAwB,IAAAA,iBAAiB;AAClB,GAzBD;;AA2BC,QAAMC,iBAAiB,GAAIV,IAAD,IAAU;AAClC,UAAM;AAAED,MAAAA,EAAF;AAAMY,MAAAA,MAAN;AAAc,SAAGC;AAAjB,QAA4BZ,IAAlC;AACAV,IAAAA,gBAAgB,CAAC;AAAES,MAAAA,EAAF;AAAM,SAAGa;AAAT,KAAD,CAAhB;AACA1B,IAAAA,yBAAyB,CAACD,cAAD,CAAzB;AACD,GAJD;;AAMA,QAAM4B,cAAc,GAAIb,IAAD,IAAU;AAC/BZ,IAAAA,aAAa,CAAC,EAAE,GAAGY,IAAL;AAAWO,MAAAA,KAAK,EAAEtB;AAAlB,KAAD,CAAb;AACAC,IAAAA,yBAAyB,CAACD,cAAD,CAAzB;AACD,GAHD;;AAKA,QAAM6B,iBAAiB,GAAId,IAAD,IAAU;AAClC,UAAM;AAAED,MAAAA;AAAF,QAASC,IAAf;AACAX,IAAAA,gBAAgB,CAACU,EAAD,CAAhB;AACAb,IAAAA,yBAAyB,CAACD,cAAD,CAAzB;AACD,GAJD;;AAMA,MAAIM,8BAAJ,EAAoC;AAClC,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAER,OAAO,CAACgC,IAAxB;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,MAAZ;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAAZ;AAAA,6BACE,QAAC,aAAD;AACE,QAAA,OAAO,EAAExC,OADX;AAEE,QAAA,IAAI,EAAEU,qBAFR;AAGE,QAAA,KAAK,EAAC,YAHR;AAIE,QAAA,QAAQ,EAAE;AACR+B,UAAAA,QAAQ,EAAGC,OAAD,IACR,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,YAAAA,UAAU,CAAC,MAAM;AACfV,cAAAA,cAAc,CAACM,OAAD,CAAd;AACAE,cAAAA,OAAO;AACR,aAHS,EAGP,IAHO,CAAV;AAID,WALD,CAFM;AAQRG,UAAAA,WAAW,EAAE,CAACL,OAAD,EAAUM,OAAV,KACX,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,YAAAA,UAAU,CAAC,MAAM;AACfb,cAAAA,iBAAiB,CAACS,OAAD,CAAjB;AACAE,cAAAA,OAAO;AACR,aAHS,EAGP,IAHO,CAAV;AAID,WALD,CATM;AAeRK,UAAAA,WAAW,EAAGD,OAAD,IACX,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,YAAAA,UAAU,CAAC,MAAM;AACfT,cAAAA,iBAAiB,CAACW,OAAD,CAAjB;AACAJ,cAAAA,OAAO;AACR,aAHS,EAGP,IAHO,CAAV;AAID,WALD;AAhBM,SAJZ;AA2BE,QAAA,OAAO,EAAE;AACPM,UAAAA,SAAS,EAAE,IADJ;AAEPC,UAAAA,WAAW,EAAE;AACXC,YAAAA,eAAe,EAAE,QADN;AAEXC,YAAAA,KAAK,EAAE;AAFI,WAFN;AAMPC,UAAAA,SAAS,EAAE;AANJ;AA3BX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD;;GA7GuBlD,e;UACRR,U,EACEW,S,EACWT,mB,EASvBC,gB;;;KAZkBK,e;AA+GxB,MAAMG,SAAS,GAAGZ,UAAU,CAAE4D,KAAD,KAAY;AACvCjB,EAAAA,IAAI,EAAE;AACJkB,IAAAA,OAAO,EAAE;AADL;AADiC,CAAZ,CAAD,CAA5B","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Company\",\r\n    field: \"company\",\r\n  },\r\n  {\r\n    title: \"Location\",\r\n    field: \"location\",\r\n  },\r\n  {\r\n    title: \"Position\",\r\n    field: \"position\",\r\n  },\r\n  {\r\n    title: \"From Date\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n  },\r\n  {\r\n    title: \"To Date\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n  },\r\n  { title: \"Remark\", field: \"remark\" },\r\n];\r\n\r\nexport default function Emp_Experiences() {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const { editEmployeeID } = useEmployeesContext();\r\n  const {\r\n    loadSingleBatchExperience,\r\n    singlebatchexperience,\r\n    addExperience,\r\n    deleteExperience,\r\n    updateExperience,\r\n    singlebatch_experience_loading,\r\n    singlebatch_experience_error,\r\n  } = useTablesContext();\r\n\r\n useEffect(() => {}, [experiencedata]);\r\n\r\n const Save_ExperienceData = () => {\r\n   console.log(experiencedata);\r\n   // delete existing data\r\n   {\r\n     singlebatchexperience.map((f) => {\r\n       const { id } = f;\r\n       deleteExperience(id);\r\n     });\r\n   }\r\n   //add new data\r\n   {\r\n     experiencedata.map((data) => {\r\n       const { name, relationship, birth_date, phone, age } = data;\r\n       addFamily({\r\n         name,\r\n         relationship,\r\n         birth_date,\r\n         phone,\r\n         age,\r\n         empid: editEmployeeID,\r\n       });\r\n     });\r\n   }\r\n   loadSingleBatchFamily(editEmployeeID);\r\n   handleDialogClose();\r\n };\r\n\r\n  const update_Experience = (data) => {\r\n    const { id, rec_id, ...fields } = data;\r\n    updateExperience({ id, ...fields });\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  };\r\n\r\n  const add_Experience = (data) => {\r\n    addExperience({ ...data, empid: editEmployeeID });\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  };\r\n\r\n  const delete_Experience = (data) => {\r\n    const { id } = data;\r\n    deleteExperience(id);\r\n    loadSingleBatchExperience(editEmployeeID);\r\n  };\r\n\r\n  if (singlebatch_experience_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading...Experience</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchexperience}\r\n          title=\"Experience\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  add_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  update_Experience(newData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  delete_Experience(oldData);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}