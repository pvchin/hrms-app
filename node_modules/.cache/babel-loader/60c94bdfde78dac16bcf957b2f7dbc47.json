{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\Payslip_Earnings.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Icon, TextField } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { payPeriodState, payPeriodEndMonthState, payPeriodEmpIdState } from \"./data/atomdata\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Name\",\n  field: \"description\"\n}, {\n  title: \"Amount\",\n  field: \"amount\",\n  type: \"numeric\"\n}];\nexport default function Payslip_Earnings({\n  setCalc,\n  earningsdata,\n  setEarningsdata,\n  handleDialogClose\n}) {\n  _s();\n\n  let history = useHistory();\n  const [obj, setObj] = useState({});\n  const [load, setLoad] = useState(true);\n  const classes = useStyles();\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\n  const payPeriod = useRecoilValue(payPeriodState);\n  const {\n    payslipearnings,\n    payslip_earning_amount,\n    setPayslipEarningAmount,\n    addPayslipEarning,\n    payslipearnings_loading,\n    updatePayslipEarning,\n    deletePayslipEarning,\n    updatePayslip,\n    editPayslipID,\n    single_payslip,\n    payslip_period,\n    getSingleBatchPayslipEarnings\n  } = usePayslipsContext();\n  const {\n    name,\n    amount\n  } = payslipearnings;\n  const {\n    allowances\n  } = useTablesContext();\n  useEffect(() => {\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\n  }, []);\n  useEffect(() => {\n    handleLookup();\n    setLoad(false);\n    console.log(\"effect\", obj);\n  }, [load]);\n\n  const calc_Earning = data => {\n    const sum = data.reduce((a, v) => a = a + v.amount, 0);\n    console.log(\"Earning\", data);\n    setPayslipEarningAmount(sum);\n  };\n\n  const update_Payslip = () => {\n    const {\n      rec_id,\n      id,\n      total_earnings,\n      ...paydata\n    } = single_payslip;\n    updatePayslip({\n      id: editPayslipID,\n      total_earnings: payslip_earning_amount,\n      ...paydata\n    });\n    setCalc(true);\n  };\n\n  const update_PayslipEarning = async data => {\n    const {\n      id,\n      rec_id,\n      empid,\n      ...fields\n    } = data;\n    console.log(\"update\", data);\n    updatePayslipEarning({\n      id: data.id,\n      empid: empid,\n      ...fields\n    });\n    update_Payslip();\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\n  };\n\n  const add_PayslipEarning = data => {\n    console.log(\"add\", data);\n    const {\n      description,\n      amount\n    } = data;\n    addPayslipEarning({\n      description: description,\n      amount: amount,\n      name: single_payslip.name,\n      empid: single_payslip.empid,\n      period: single_payslip.period\n    });\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\n  };\n\n  const delete_PayslipEarning = data => {\n    const {\n      id\n    } = data;\n    deletePayslipEarning(id);\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\n  };\n\n  const handleLookup = () => {\n    setObj(allowances.reduce(function (acc, cur, i) {\n      acc[cur.rec_id] = cur.name;\n      return acc;\n    }, {}));\n  };\n\n  const Save_EarningsData = () => {\n    // delete unwanted data\n    payslipearnings.forEach(row => {\n      const {\n        id,\n        rec_id\n      } = row;\n      const res = earningsdata.find(r => r.rec_id === rec_id);\n\n      if (!res) {\n        deletePayslipEarning(id);\n      }\n    }); //add or update new data\n\n    earningsdata.forEach(data => {\n      const {\n        id,\n        description,\n        amount\n      } = data;\n\n      if (id) {\n        const {\n          id,\n          rec_id,\n          tableData,\n          ...fields\n        } = data;\n        updatePayslipEarning({\n          id,\n          ...fields\n        });\n      } else {\n        addPayslipEarning({\n          description: description,\n          amount: amount,\n          name: single_payslip.name,\n          empid: payPeriodEmpId,\n          period: payPeriod\n        });\n      }\n    });\n    handleDialogClose();\n  };\n\n  if (payslipearnings_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading... Incomes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: earningsdata,\n        title: \"Income\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              setEarningsdata([...earningsdata, newData]);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataUpdate = [...earningsdata];\n              const index = oldData.tableData.id;\n              dataUpdate[index] = newData;\n              setEarningsdata([...dataUpdate]);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataDelete = [...earningsdata];\n              const index = oldData.tableData.id;\n              dataDelete.splice(index, 1);\n              setEarningsdata([...dataDelete]);\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"primary\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px 10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"secondary\",\n                className: classes.button,\n                onClick: Save_EarningsData,\n                children: [\"Update \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 28\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payslip_Earnings, \"DruZSfjIEKO0mCDj4hEoIzpl4XI=\", false, function () {\n  return [useHistory, useStyles, useRecoilValue, useRecoilValue, usePayslipsContext, useTablesContext];\n});\n\n_c = Payslip_Earnings;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Payslip_Earnings\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/Payslip_Earnings.js"],"names":["React","useState","useEffect","useRef","MaterialTable","MTableToolbar","makeStyles","Button","Icon","TextField","AddIcon","EditIcon","DeleteIcon","CheckIcon","SearchIcon","useHistory","Link","useSetRecoilState","useRecoilValue","payPeriodState","payPeriodEndMonthState","payPeriodEmpIdState","usePayslipsContext","useTablesContext","columns","title","field","type","Payslip_Earnings","setCalc","earningsdata","setEarningsdata","handleDialogClose","history","obj","setObj","load","setLoad","classes","useStyles","payPeriodEmpId","payPeriod","payslipearnings","payslip_earning_amount","setPayslipEarningAmount","addPayslipEarning","payslipearnings_loading","updatePayslipEarning","deletePayslipEarning","updatePayslip","editPayslipID","single_payslip","payslip_period","getSingleBatchPayslipEarnings","name","amount","allowances","empid","handleLookup","console","log","calc_Earning","data","sum","reduce","a","v","update_Payslip","rec_id","id","total_earnings","paydata","update_PayslipEarning","fields","add_PayslipEarning","description","period","delete_PayslipEarning","acc","cur","i","Save_EarningsData","forEach","row","res","find","r","tableData","root","maxWidth","paddingTop","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","index","onRowDelete","dataDelete","splice","filtering","headerStyle","backgroundColor","color","showTitle","Toolbar","props","padding","button","rightIcon","theme"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport MaterialTable, { MTableToolbar} from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, TextField } from \"@material-ui/core\"\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"description\",\r\n  },\r\n  { title: \"Amount\", field: \"amount\", type: \"numeric\" },\r\n];\r\n\r\n\r\nexport default function Payslip_Earnings({\r\n  setCalc,\r\n  earningsdata,\r\n  setEarningsdata,\r\n  handleDialogClose,\r\n}) {\r\n  let history = useHistory();\r\n  const [obj, setObj] = useState({});\r\n  const [load, setLoad] = useState(true);\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const {\r\n    payslipearnings,\r\n    payslip_earning_amount,\r\n    setPayslipEarningAmount,\r\n    addPayslipEarning,\r\n    payslipearnings_loading,\r\n    updatePayslipEarning,\r\n    deletePayslipEarning,\r\n    updatePayslip,\r\n    editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipEarnings,\r\n  } = usePayslipsContext();\r\n\r\n  const { name, amount } = payslipearnings;\r\n  const { allowances } = useTablesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleLookup();\r\n    setLoad(false);\r\n    console.log(\"effect\", obj);\r\n  }, [load]);\r\n\r\n  const calc_Earning = (data) => {\r\n    const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n    console.log(\"Earning\", data);\r\n    setPayslipEarningAmount(sum);\r\n  };\r\n\r\n  const update_Payslip = () => {\r\n    const { rec_id, id, total_earnings, ...paydata } = single_payslip;\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_earnings: payslip_earning_amount,\r\n      ...paydata,\r\n    });\r\n    setCalc(true);\r\n  };\r\n\r\n  const update_PayslipEarning = async (data) => {\r\n    const { id, rec_id, empid, ...fields } = data;\r\n    console.log(\"update\", data);\r\n    updatePayslipEarning({ id: data.id, empid: empid, ...fields });\r\n\r\n    update_Payslip();\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const add_PayslipEarning = (data) => {\r\n    console.log(\"add\", data);\r\n    const { description, amount } = data;\r\n    addPayslipEarning({\r\n      description: description,\r\n      amount: amount,\r\n      name: single_payslip.name,\r\n      empid: single_payslip.empid,\r\n      period: single_payslip.period,\r\n    });\r\n\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const delete_PayslipEarning = (data) => {\r\n    const { id } = data;\r\n    deletePayslipEarning(id);\r\n    getSingleBatchPayslipEarnings(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const handleLookup = () => {\r\n    setObj(\r\n      allowances.reduce(function (acc, cur, i) {\r\n        acc[cur.rec_id] = cur.name;\r\n        return acc;\r\n      }, {})\r\n    );\r\n  };\r\n\r\nconst Save_EarningsData = () => {\r\n  // delete unwanted data\r\n  payslipearnings.forEach((row) => {\r\n    const { id, rec_id } = row;\r\n    const res = earningsdata.find((r) => r.rec_id === rec_id);\r\n    if (!res) {\r\n      deletePayslipEarning(id);\r\n    }\r\n  });\r\n  //add or update new data\r\n\r\n  earningsdata.forEach((data) => {\r\n    const { id,description, amount } = data;\r\n    if (id) {\r\n      const { id, rec_id, tableData, ...fields } = data;\r\n      updatePayslipEarning({ id, ...fields });\r\n    } else {\r\n      addPayslipEarning({\r\n        description: description,\r\n        amount: amount,\r\n        name: single_payslip.name,\r\n        empid: payPeriodEmpId,\r\n        period: payPeriod,\r\n      });\r\n    }\r\n  });\r\n\r\n  handleDialogClose();\r\n};\r\n\r\n\r\n  if (payslipearnings_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Incomes.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={earningsdata}\r\n          title=\"Income\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setEarningsdata([...earningsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setEarningsdata([...dataUpdate]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...earningsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setEarningsdata([...dataDelete]);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"primary\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={Save_EarningsData}\r\n                  >\r\n                    Update <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}