{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\OnLeavesViewStaff.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { List, ListItem, ListItemText, Grid } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport axios from \"axios\";\nimport { useAsync } from \"react-async\";\nimport MaterialTable from \"material-table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { selector, useRecoilState } from \"recoil\";\nimport { loginLevelState } from \"./data/atomdata\";\nimport { leaves_url } from \"../utils/constants\";\nimport { fetchDepartmentsSelector } from \"./data/selectordata\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 240;\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\"\n}, {\n  title: \"From Data\",\n  field: \"from_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"To Data\",\n  field: \"to_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"Status\",\n  field: \"to_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}]; // export const onleavesdatastate = atom({\n//   key: \"onleavesdatastate\",\n//   default: [],\n// });\n\nconst fetchOnLeavesDetails = selector({\n  key: \"onLeaveDetailsSelector\",\n  get: async ({\n    get\n  }) => {\n    try {\n      const {\n        data\n      } = await axios.get(leaves_url);\n      const onleavesdata = data;\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n});\n\nconst loadUsers = async () => {\n  const {\n    data\n  } = await axios.get(leaves_url);\n  return data;\n}; //   await fetch(\"https://jsonplaceholder.typicode.com/users\")\n//     .then((res) => (res.ok ? res : Promise.reject(res)))\n//     .then((res) => res.json());\n\n\nconst fetchDetails = async () => await fetch(leaves_url).then(res => res.ok ? res : Promise.reject(res)).then(res => res.json());\n\nconst OnLeavesViewStaff = () => {\n  _s();\n\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  const [userdata, setUserdata] = useState([]);\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState); //const [userdata, setUserdata] = useRecoilState(userdatastate);\n  //const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\n\n  const {\n    data,\n    error,\n    isLoading\n  } = useAsync({\n    promiseFn: loadUsers\n  });\n  if (isLoading) return \"Loading...\";\n  if (error) return `Internet connections problem!`;\n  if (data) console.log(\"data\", data);\n  return /*#__PURE__*/_jsxDEV(List, {\n    className: classes.roow,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      children: data.filter(i => i.empid === loginLevel.loginUserId).map(row => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 4,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              children: row.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 4,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              children: row.from_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 4,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              children: row.to_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OnLeavesViewStaff, \"t37CbBQV+3x/ZXugwiTNcKtP8uU=\", false, function () {\n  return [useStyles, useRecoilState, useAsync];\n});\n\n_c = OnLeavesViewStaff;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: \"2\"\n  },\n  paper: {\n    padding: theme.spacing(1),\n    //grid padding\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\nexport default OnLeavesViewStaff;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnLeavesViewStaff\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/OnLeavesViewStaff.js"],"names":["React","useState","useEffect","makeStyles","List","ListItem","ListItemText","Grid","clsx","axios","useAsync","MaterialTable","Paper","selector","useRecoilState","loginLevelState","leaves_url","fetchDepartmentsSelector","drawerWidth","columns","title","field","editable","type","dateSetting","locale","fetchOnLeavesDetails","key","get","data","onleavesdata","error","loadUsers","fetchDetails","fetch","then","res","ok","Promise","reject","json","OnLeavesViewStaff","classes","useStyles","fixedHeightPaper","paper","fixedHeight","userdata","setUserdata","loginLevel","setLoginLevel","isLoading","promiseFn","console","log","roow","filter","i","empid","loginUserId","map","row","name","from_date","to_date","id","theme","root","padding","spacing","textAlign","color","palette","text","secondary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { List, ListItem, ListItemText, Grid } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport axios from \"axios\";\r\nimport { useAsync } from \"react-async\";\r\nimport MaterialTable from \"material-table\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { selector, useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { leaves_url } from \"../utils/constants\";\r\nimport { fetchDepartmentsSelector } from \"./data/selectordata\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Data\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Data\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n];\r\n\r\n// export const onleavesdatastate = atom({\r\n//   key: \"onleavesdatastate\",\r\n//   default: [],\r\n// });\r\n\r\nconst fetchOnLeavesDetails = selector({\r\n  key: \"onLeaveDetailsSelector\",\r\n  get: async ({ get }) => {\r\n    try {\r\n      const { data } = await axios.get(leaves_url);\r\n      const onleavesdata = data;\r\n\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n});\r\n\r\nconst loadUsers = async () => {\r\n  const { data } = await axios.get(leaves_url);\r\n  return data;\r\n};\r\n//   await fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n//     .then((res) => (res.ok ? res : Promise.reject(res)))\r\n//     .then((res) => res.json());\r\n\r\nconst fetchDetails = async () =>\r\n  await fetch(leaves_url)\r\n    .then((res) => (res.ok ? res : Promise.reject(res)))\r\n    .then((res) => res.json());\r\n\r\nconst OnLeavesViewStaff = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [userdata, setUserdata] = useState([]);\r\n  const [loginLevel, setLoginLevel] = useRecoilState(loginLevelState);\r\n\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  //const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\r\n  const { data, error, isLoading } = useAsync({ promiseFn: loadUsers });\r\n  if (isLoading) return \"Loading...\";\r\n  if (error) return `Internet connections problem!`;\r\n  if (data) console.log(\"data\", data);\r\n  return (\r\n    <List className={classes.roow}>\r\n      <Grid container direction=\"row\">\r\n        {data\r\n          .filter((i) => i.empid === loginLevel.loginUserId)\r\n          .map((row) => {\r\n            return (\r\n              <ListItem key={row.id}>\r\n                <Grid item sm={4} align=\"center\">\r\n                  <ListItemText>{row.name}</ListItemText>\r\n                </Grid>\r\n                <Grid item sm={4} align=\"center\">\r\n                  <ListItemText>{row.from_date}</ListItemText>\r\n                </Grid>\r\n                <Grid item sm={4} align=\"center\">\r\n                  <ListItemText>{row.to_date}</ListItemText>\r\n                </Grid>\r\n              </ListItem>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"2\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1), //grid padding\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default OnLeavesViewStaff;\r\n"]},"metadata":{},"sourceType":"module"}