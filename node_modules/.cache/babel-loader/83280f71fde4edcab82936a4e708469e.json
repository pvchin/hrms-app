{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\Payslip_Deductions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useTablesContext } from \"../context/tables_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Payslip_Deductions() {\n  _s();\n\n  const classes = useStyles();\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\n  const payPeriod = useRecoilValue(payPeriodState);\n  const payEarningData = useRecoilValue(payEarningDataState);\n  const {\n    payslipdeductions,\n    payslip_deduction_amount,\n    setPayslipDeductionAmount,\n    loadPayslipDeductions,\n    addPayslipDeduction,\n    payslipdeductions_loading,\n    updatePayslipDeduction,\n    deletePayslipDeduction,\n    updatePayslip,\n    editPayslipID,\n    single_payslip,\n    payslip_period,\n    getSingleBatchPayslipDeductions\n  } = usePayslipsContext();\n  const {\n    name,\n    amount\n  } = payslipdeductions;\n  const {\n    deductions\n  } = useTablesContext();\n\n  const calc_Deduction = data => {\n    const sum = data.reduce((a, v) => a = a + v.amount, 0);\n    setPayslipDeductionAmount(sum);\n  };\n\n  useEffect(() => {\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  }, []);\n  useEffect(() => {\n    handleLookup();\n    setLoad(false);\n    console.log(\"effect\", obj);\n  }, [load]);\n\n  const update_Payslip = () => {\n    const {\n      rec_id,\n      id,\n      total_deductions,\n      ...paydata\n    } = single_payslip;\n    updatePayslip({\n      id: editPayslipID,\n      total_deductions: payslip_deduction_amount,\n      ...paydata\n    });\n  };\n\n  const update_PayslipDeduction = async data => {\n    const {\n      id,\n      rec_id,\n      empid,\n      ...fields\n    } = data;\n    updatePayslipDeduction({\n      id: data.id,\n      empid: empid,\n      ...fields\n    });\n    update_Payslip();\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  };\n\n  const add_PayslipDeduction = data => {\n    const {\n      description,\n      amount\n    } = data;\n    addPayslipDeduction({\n      description: description,\n      amount: amount,\n      name: single_payslip.name,\n      empid: single_payslip.empid,\n      period: single_payslip.period\n    });\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  };\n\n  const delete_PayslipDeduction = data => {\n    const {\n      id\n    } = data;\n    deletePayslipDeduction(id);\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\n  };\n\n  const Save_DeductionsData = () => {\n    // delete unwanted data\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\n    oldDeductionsdata.forEach(row => {\n      const {\n        id,\n        rec_id\n      } = row;\n      const res = deductionsdata.find(r => r.rec_id === rec_id);\n      console.log(\"find\", id, res);\n\n      if (!res) {\n        deletePayslipDeduction(id);\n      }\n    }); //add or update new data\n\n    deductionsdata.forEach(data => {\n      const {\n        id,\n        description,\n        amount\n      } = data;\n\n      if (id) {\n        const {\n          id,\n          rec_id,\n          tableData,\n          ...fields\n        } = data;\n        updatePayslipDeduction({\n          id,\n          ...fields\n        });\n      } else {\n        addPayslipDeduction({\n          description: description,\n          amount: amount,\n          name: single_payslip.name,\n          empid: payPeriodEmpId,\n          period: payPeriod\n        });\n      }\n    });\n    handleDialogClose();\n  };\n\n  if (payslipdeductions_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading... Expenses.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: [{\n          title: \"Name\",\n          field: \"description\",\n          lookup: obj\n        }, {\n          title: \"Amount\",\n          field: \"amount\",\n          type: \"numeric\"\n        }],\n        data: payslipdeductions,\n        title: \"Deductions\",\n        editable: {\n          onRowAdd: newData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              setDeductionsdata([...deductionsdata, newData]);\n              resolve();\n            }, 1000);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataUpdate = [...deductionsdata];\n              const index = oldData.tableData.id;\n              dataUpdate[index] = newData;\n              setDeductionsdata([...dataUpdate]);\n              resolve();\n            }, 1000);\n          }),\n          onRowDelete: oldData => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataDelete = [...deductionsdata];\n              const index = oldData.tableData.id;\n              dataDelete.splice(index, 1);\n              setDeductionsdata([...dataDelete]);\n              resolve();\n            }, 1000);\n          })\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payslip_Deductions, \"cFJ/NepwRCPpzyQGTUWZ0yd0qxg=\", true, function () {\n  return [useStyles, usePayslipsContext, useTablesContext];\n});\n\n_c = Payslip_Deductions;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"Payslip_Deductions\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/Payslip_Deductions.js"],"names":["React","useState","useEffect","MaterialTable","makeStyles","usePayslipsContext","useTablesContext","Payslip_Deductions","classes","useStyles","payPeriodEmpId","useRecoilValue","payPeriodEmpIdState","payPeriod","payPeriodState","payEarningData","payEarningDataState","payslipdeductions","payslip_deduction_amount","setPayslipDeductionAmount","loadPayslipDeductions","addPayslipDeduction","payslipdeductions_loading","updatePayslipDeduction","deletePayslipDeduction","updatePayslip","editPayslipID","single_payslip","payslip_period","getSingleBatchPayslipDeductions","name","amount","deductions","calc_Deduction","data","sum","reduce","a","v","empid","handleLookup","setLoad","console","log","obj","load","update_Payslip","rec_id","id","total_deductions","paydata","update_PayslipDeduction","fields","add_PayslipDeduction","description","period","delete_PayslipDeduction","Save_DeductionsData","deductionsdata","oldDeductionsdata","forEach","row","res","find","r","tableData","handleDialogClose","root","maxWidth","paddingTop","title","field","lookup","type","onRowAdd","newData","Promise","resolve","reject","setTimeout","setDeductionsdata","onRowUpdate","oldData","dataUpdate","index","onRowDelete","dataDelete","splice","theme","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useTablesContext } from \"../context/tables_context\";\r\n\r\nexport default function Payslip_Deductions() {\r\n  const classes = useStyles();\r\n  const payPeriodEmpId = useRecoilValue(payPeriodEmpIdState);\r\n  const payPeriod = useRecoilValue(payPeriodState);\r\n  const payEarningData = useRecoilValue(payEarningDataState);\r\n  const {\r\n    payslipdeductions,\r\n    payslip_deduction_amount,\r\n    setPayslipDeductionAmount,\r\n    loadPayslipDeductions,\r\n    addPayslipDeduction,\r\n    payslipdeductions_loading,\r\n    updatePayslipDeduction,\r\n    deletePayslipDeduction,\r\n    updatePayslip,\r\n    editPayslipID,\r\n    single_payslip,\r\n    payslip_period,\r\n    getSingleBatchPayslipDeductions,\r\n  } = usePayslipsContext();\r\n  const { name, amount } = payslipdeductions;\r\n  const { deductions } = useTablesContext();\r\n\r\n  const calc_Deduction = (data) => {\r\n    const sum = data.reduce((a, v) => (a = a + v.amount), 0);\r\n    setPayslipDeductionAmount(sum);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleLookup();\r\n    setLoad(false);\r\n    console.log(\"effect\", obj);\r\n  }, [load]);\r\n\r\n  const update_Payslip = () => {\r\n    const { rec_id, id, total_deductions, ...paydata } = single_payslip;\r\n    updatePayslip({\r\n      id: editPayslipID,\r\n      total_deductions: payslip_deduction_amount,\r\n      ...paydata,\r\n    });\r\n  };\r\n\r\n  const update_PayslipDeduction = async (data) => {\r\n    const { id, rec_id, empid, ...fields } = data;\r\n    updatePayslipDeduction({ id: data.id, empid: empid, ...fields });\r\n    update_Payslip();\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const add_PayslipDeduction = (data) => {\r\n    const { description, amount } = data;\r\n    addPayslipDeduction({\r\n      description: description,\r\n      amount: amount,\r\n      name: single_payslip.name,\r\n      empid: single_payslip.empid,\r\n      period: single_payslip.period,\r\n    });\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const delete_PayslipDeduction = (data) => {\r\n    const { id } = data;\r\n    deletePayslipDeduction(id);\r\n    getSingleBatchPayslipDeductions(single_payslip.empid, payslip_period);\r\n  };\r\n\r\n  const Save_DeductionsData = () => {\r\n    // delete unwanted data\r\n    console.log(\"update\", deductionsdata, oldDeductionsdata);\r\n    oldDeductionsdata.forEach((row) => {\r\n      const { id, rec_id } = row;\r\n      const res = deductionsdata.find((r) => r.rec_id === rec_id);\r\n      console.log(\"find\", id, res);\r\n      if (!res) {\r\n        deletePayslipDeduction(id);\r\n      }\r\n    });\r\n    //add or update new data\r\n\r\n    deductionsdata.forEach((data) => {\r\n      const { id, description, amount } = data;\r\n      if (id) {\r\n        const { id, rec_id, tableData, ...fields } = data;\r\n        updatePayslipDeduction({ id, ...fields });\r\n      } else {\r\n        addPayslipDeduction({\r\n          description: description,\r\n          amount: amount,\r\n          name: single_payslip.name,\r\n          empid: payPeriodEmpId,\r\n          period: payPeriod,\r\n        });\r\n      }\r\n    });\r\n    handleDialogClose();\r\n  };\r\n\r\n  if (payslipdeductions_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading... Expenses.</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <h1>Expenses Claims Application</h1> */}\r\n\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={[\r\n            {\r\n              title: \"Name\",\r\n              field: \"description\",\r\n              lookup: obj,\r\n            },\r\n            { title: \"Amount\", field: \"amount\", type: \"numeric\" },\r\n          ]}\r\n          data={payslipdeductions}\r\n          title=\"Deductions\"\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  setDeductionsdata([...deductionsdata, newData]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setDeductionsdata([...dataUpdate]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataDelete = [...deductionsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setDeductionsdata([...dataDelete]);\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}