{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\OnLeavesView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { List, ListItem, Grid } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { atom, selector, useRecoilValue, useRecoilState, useSetRecoilState, useRecoilValueLoadable, useRecoilStateLoadable } from \"recoil\"; // import { useRecoilValue, useSetRecoilState, useRecoilState } from \"recoil\";\n// import { departmentsSelector } from \"../helpers/Recoilhelpers\";\n\nimport { onleaves_url } from \"../utils/constants\";\nimport { fetchDepartmentsSelector } from \"./data/selectordata\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 240;\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\"\n}, {\n  title: \"From Data\",\n  field: \"from_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"To Data\",\n  field: \"to_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}];\nexport const onleavesdatastate = atom({\n  key: \"onleavesdatastate\",\n  default: []\n});\nconst fetchOnLeavesDetails = selector({\n  key: \"onLeaveDetailsSelector\",\n  get: async ({\n    get\n  }) => {\n    try {\n      const {\n        data\n      } = await axios.get(onleaves_url);\n      const onleavesdata = data;\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n});\n\nconst OnLeavesView = () => {\n  _s();\n\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  const [userdata, setUserdata] = useState([]); //const [userdata, setUserdata] = useRecoilState(userdatastate);\n\n  const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\n  const {\n    state,\n    contents\n  } = onLeavesDetails;\n  console.log(onLeavesDetails);\n\n  if (onLeavesDetails.state === \"hasError\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" There is Internet connection problem! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (state === \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading....On Leaves\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (state === \"hasValue\") {\n    const editable = contents.map(r => {\n      return { ...r\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: \"100%\",\n          paddingTop: \"5px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: editable.map(r => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  wordSpacing: 10\n                },\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  sm: 6,\n                  lg: 3,\n                  children: r.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  sm: 6,\n                  lg: 3,\n                  children: r.from_date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  sm: 6,\n                  children: r.to_date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this)\n            }, r.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(OnLeavesView, \"xwMHr9Ym+OMAAY0DR7DFaylTTL0=\", false, function () {\n  return [useStyles, useRecoilValueLoadable];\n});\n\n_c = OnLeavesView;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  },\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    //grid padding\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\nexport default OnLeavesView;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnLeavesView\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/OnLeavesView.js"],"names":["React","useState","useEffect","makeStyles","List","ListItem","Grid","clsx","axios","MaterialTable","Paper","atom","selector","useRecoilValue","useRecoilState","useSetRecoilState","useRecoilValueLoadable","useRecoilStateLoadable","onleaves_url","fetchDepartmentsSelector","drawerWidth","columns","title","field","editable","type","dateSetting","locale","onleavesdatastate","key","default","fetchOnLeavesDetails","get","data","onleavesdata","error","OnLeavesView","classes","useStyles","fixedHeightPaper","paper","fixedHeight","userdata","setUserdata","onLeavesDetails","state","contents","console","log","map","r","root","maxWidth","paddingTop","wordSpacing","name","from_date","to_date","id","theme","padding","flexGrow","spacing","textAlign","color","palette","text","secondary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { List, ListItem, Grid } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  atom,\r\n  selector,\r\n  useRecoilValue,\r\n  useRecoilState,\r\n  useSetRecoilState,\r\n  useRecoilValueLoadable,\r\n  useRecoilStateLoadable,\r\n} from \"recoil\";\r\n// import { useRecoilValue, useSetRecoilState, useRecoilState } from \"recoil\";\r\n// import { departmentsSelector } from \"../helpers/Recoilhelpers\";\r\nimport { onleaves_url } from \"../utils/constants\";\r\nimport { fetchDepartmentsSelector } from \"./data/selectordata\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Data\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Data\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n];\r\n\r\nexport const onleavesdatastate = atom({\r\n  key: \"onleavesdatastate\",\r\n  default: [],\r\n});\r\n\r\nconst fetchOnLeavesDetails = selector({\r\n  key: \"onLeaveDetailsSelector\",\r\n  get: async ({ get }) => {\r\n    try {\r\n      const { data } = await axios.get(onleaves_url);\r\n      const onleavesdata = data;\r\n\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n});\r\n\r\nconst OnLeavesView = () => {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [userdata, setUserdata] = useState([]);\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\r\n  const { state, contents } = onLeavesDetails;\r\n\r\n  console.log(onLeavesDetails);\r\n  if (onLeavesDetails.state === \"hasError\") {\r\n    return <div> There is Internet connection problem! </div>;\r\n  }\r\n\r\n  if (state === \"loading\") {\r\n    return (\r\n      <div>\r\n        <h2>Loading....On Leaves</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (state === \"hasValue\") {\r\n    const editable = contents.map((r) => {\r\n      return { ...r };\r\n    });\r\n    return (\r\n      <div className={classes.root}>\r\n        <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n          {/* <MaterialTable\r\n            columns={columns}\r\n            data={editable}\r\n            title=\"Staffs On Leave within 30 Days\"\r\n            options={{\r\n              filtering: false,\r\n              search: false,\r\n              toolbar: false,\r\n              exportButton: true,\r\n              headerStyle: {\r\n                backgroundColor: \"orange\",\r\n                color: \"primary\",\r\n              },\r\n              showTitle: false,\r\n            }}\r\n          /> */}\r\n\r\n          <Grid container>\r\n            {editable.map((r) => {\r\n              return (\r\n                <li key={r.id}>\r\n                  <div style={{ wordSpacing: 10 }}>\r\n                    <Grid item sm={6} lg={3}>\r\n                      {r.name}\r\n                    </Grid>\r\n                    <Grid item sm={6} lg={3}>\r\n                      {r.from_date}\r\n                    </Grid>\r\n                    <Grid item sm={6}>\r\n                      {r.to_date}\r\n                    </Grid>\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1), //grid padding\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default OnLeavesView;\r\n"]},"metadata":{},"sourceType":"module"}