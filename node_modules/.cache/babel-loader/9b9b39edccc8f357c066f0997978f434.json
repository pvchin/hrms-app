{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\PayslipTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Icon } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useSetRecoilState, useRecoilState } from \"recoil\";\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useExpensesContext } from \"../context/expenses_context\";\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\nimport { AlertDialog } from \"../helpers/AlertDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTERSTRING = \"Pending\";\nconst columns = [{\n  title: \"Period\",\n  field: \"period\"\n}, {\n  title: \"Payrun Batch\",\n  field: \"payrun\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  }\n}, {\n  title: \"Pay Date\",\n  field: \"pay_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  }\n}, // { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\n// { title: \"Total Allowances\", field: \"totalallowances\", type: \"currency\" },\n// { title: \"Total Deductions\", field: \"totaldeductions\", type: \"currency\" },\n{\n  title: \"Total Payroll\",\n  field: \"totalpayroll\",\n  type: \"currency\"\n}, {\n  title: \"Status\",\n  field: \"status\"\n}];\nexport default function PayslipTable() {\n  _s();\n\n  let history = useHistory();\n  const classes = useStyles();\n  const [input, setInput] = useRecoilState(payrunState);\n  const [isLoadInput, setIsLoadInput] = useState(false);\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const [deletestate, setDeletestate] = useState({\n    id: \"\",\n    payrun: \"\"\n  });\n  const [payrunId, setPayrunId] = useRecoilState(payrunIdState);\n  const {\n    loadPeriodExpenses,\n    periodexpenses,\n    updateExpense\n  } = useExpensesContext();\n  const {\n    getSingleBatchDailyAllowance,\n    singlebatchdailyallowance,\n    updateDailyAllowance,\n    deleteDailyAllowance\n  } = useDailyAllowancesContext();\n  const {\n    payrun,\n    getPayrun,\n    payrun_loading,\n    payrun_error,\n    getSinglePayslip,\n    setEditPayslipID,\n    setIsPayslipEditingOn,\n    single_payslip,\n    setPayslipPeriod,\n    deletePayrun,\n    deletePayslip,\n    pending_payslips,\n    loadPendingPayslips\n  } = usePayslipsContext();\n  useEffect(() => {\n    getPayrun(); // loadPendingPayslips(FILTERSTRING);\n  }, []);\n  useEffect(() => {\n    if (single_payslip.payrun) {\n      console.log(\"single_payslip\", single_payslip);\n    }\n  }, [single_payslip]);\n\n  const handleAlertOpen = () => {\n    setIsAlertOpen(true);\n  };\n\n  const handleAlertClose = () => {\n    setIsAlertOpen(false);\n  };\n\n  const update_Input = async data => {\n    console.log(\"input\", data);\n    setInput({ ...input,\n      payfreq: data.payfreq,\n      fromdate: new Date(data.fromdate).toDateString(),\n      todate: data.todate,\n      paydate: data.paydate,\n      period: data.period,\n      payrun: data.payrun\n    });\n    setInput({ ...input,\n      payfreq: data.payfreq,\n      fromdate: data.fromdate,\n      todate: data.todate,\n      paydate: data.paydate,\n      period: data.period,\n      payrun: data.payrun\n    });\n    console.log(\"payrun\", input);\n  };\n\n  const update_Payslip = async data => {\n    console.log(\"data\", data);\n    const {\n      id,\n      payrun\n    } = data;\n    setPayslipPeriod(payrun); //save to recoil\n\n    setEditPayslipID(id);\n    setIsPayslipEditingOn();\n    getSinglePayslip(id);\n    history.push(\"/payrunbatch\");\n  };\n\n  const delete_Payslip = data => {\n    const {\n      id,\n      payrun\n    } = data;\n    setDeletestate({\n      id: id,\n      payrun: payrun\n    });\n    loadPeriodExpenses(payrun);\n    getSingleBatchDailyAllowance(payrun);\n    handleAlertOpen();\n  };\n\n  const handleOnDeleteConfirm = data => {\n    console.log(\"payslip delete\", deletestate);\n    const {\n      id,\n      payrun\n    } = deletestate; //load period expenses\n\n    loadPeriodExpenses(payrun); //delete allows detls\n\n    pending_payslips.forEach(rec => {\n      if (rec.payrun === payrun) {\n        deletePayslip(rec.id);\n      }\n    }); //delete allows batch\n\n    deletePayrun(id);\n    getPayrun(); //unpaid expenses\n\n    periodexpenses.forEach(rec => {\n      if (rec.payrun === payrun) {\n        updateExpense({\n          id: rec.id,\n          payrun: \"\"\n        });\n      }\n    });\n  };\n\n  const handleVerifyPayslipData = e => {\n    e.preventDefault();\n  };\n\n  if (payrun_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading.....Payslips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (payrun_error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Internet connection problem!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: payrun,\n        title: \"Payroll\",\n        icons: {\n          Add: props => /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this),\n          Edit: props => /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 30\n          }, this),\n          Delete: props => /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 32\n          }, this),\n          Clear: props => /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 31\n          }, this),\n          Check: props => /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 31\n          }, this),\n          Search: props => /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 32\n          }, this),\n          ResetSearch: props => /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 37\n          }, this),\n          Build: props => /*#__PURE__*/_jsxDEV(BuildOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 31\n          }, this)\n        },\n        actions: [rowData => ({\n          // disabled: rowData.status !== \"Pending\",\n          icon: \"edit\",\n          position: \"row\",\n          tooltip: \"Edit Record\",\n          onClick: (event, rowData) => {\n            update_Input(rowData);\n            update_Payslip(rowData);\n          }\n        }), rowData => ({\n          // disabled: rowData.status === \"Approve\",\n          icon: \"delete\",\n          tooltip: \"Delete Record\",\n          position: \"row\",\n          onClick: (event, rowData) => {\n            //delete_Payslip(rowData);\n            delete_Payslip(rowData);\n          }\n        }) // {\n        //   icon: \"add\",\n        //   tooltip: \"Add Record\",\n        //   isFreeAction: true,\n        //   onClick: (event, rowData) => {\n        //     add_Payslip(rowData);\n        //   },\n        // },\n        ],\n        options: {\n          filtering: true,\n          selection: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"#FFF\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: \"5px 10px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"secondary\",\n                className: classes.button,\n                onClick: e => handleVerifyPayslipData(e),\n                children: [\"Verify \", /*#__PURE__*/_jsxDEV(Icon, {\n                  className: classes.rightIcon,\n                  children: \"send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 28\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AlertDialog, {\n        handleClose: handleAlertClose,\n        onConfirm: handleOnDeleteConfirm,\n        isOpen: isAlertOpen,\n        title: \"Delete Payslip Batch\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Are you sure you want to delete ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PayslipTable, \"Uh3oHTN5DgaF37xUPr8FxJdAAW8=\", false, function () {\n  return [useHistory, useStyles, useRecoilState, useRecoilState, useExpensesContext, useDailyAllowancesContext, usePayslipsContext];\n});\n\n_c = PayslipTable;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"PayslipTable\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/PayslipTable.js"],"names":["React","useState","useEffect","MaterialTable","MTableToolbar","makeStyles","Button","Icon","AddIcon","EditIcon","DeleteIcon","CheckIcon","SearchIcon","ArrowBackIcon","BuildOutlinedIcon","useHistory","Link","useSetRecoilState","useRecoilState","payrunState","payrunIdState","usePayslipsContext","useExpensesContext","useDailyAllowancesContext","AlertDialog","FILTERSTRING","columns","title","field","type","dateSetting","locale","PayslipTable","history","classes","useStyles","input","setInput","isLoadInput","setIsLoadInput","isAlertOpen","setIsAlertOpen","deletestate","setDeletestate","id","payrun","payrunId","setPayrunId","loadPeriodExpenses","periodexpenses","updateExpense","getSingleBatchDailyAllowance","singlebatchdailyallowance","updateDailyAllowance","deleteDailyAllowance","getPayrun","payrun_loading","payrun_error","getSinglePayslip","setEditPayslipID","setIsPayslipEditingOn","single_payslip","setPayslipPeriod","deletePayrun","deletePayslip","pending_payslips","loadPendingPayslips","console","log","handleAlertOpen","handleAlertClose","update_Input","data","payfreq","fromdate","Date","toDateString","todate","paydate","period","update_Payslip","push","delete_Payslip","handleOnDeleteConfirm","forEach","rec","handleVerifyPayslipData","e","preventDefault","root","maxWidth","paddingTop","Add","props","Edit","Delete","Clear","Check","Search","ResetSearch","Build","rowData","icon","position","tooltip","onClick","event","filtering","selection","headerStyle","backgroundColor","color","showTitle","Toolbar","padding","button","rightIcon","theme"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Icon } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilState } from \"recoil\";\r\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { AlertDialog } from \"../helpers/AlertDialog\";\r\n\r\nconst FILTERSTRING = \"Pending\";\r\n\r\nconst columns = [\r\n  { title: \"Period\", field: \"period\" },\r\n  {\r\n    title: \"Payrun Batch\",\r\n    field: \"payrun\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  {\r\n    title: \"Pay Date\",\r\n    field: \"pay_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n  },\r\n  // { title: \"Total Wages\", field: \"totalwages\", type: \"currency\" },\r\n  // { title: \"Total Allowances\", field: \"totalallowances\", type: \"currency\" },\r\n  // { title: \"Total Deductions\", field: \"totaldeductions\", type: \"currency\" },\r\n  { title: \"Total Payroll\", field: \"totalpayroll\", type: \"currency\" },\r\n  { title: \"Status\", field: \"status\" },\r\n];\r\n\r\nexport default function PayslipTable() {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [isLoadInput, setIsLoadInput] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [deletestate, setDeletestate] = useState({ id: \"\", payrun: \"\" });\r\n  const [payrunId, setPayrunId] = useRecoilState(payrunIdState);\r\n  const { loadPeriodExpenses, periodexpenses, updateExpense } =\r\n    useExpensesContext();\r\n  const {\r\n    getSingleBatchDailyAllowance,\r\n    singlebatchdailyallowance,\r\n    updateDailyAllowance,\r\n    deleteDailyAllowance,\r\n  } = useDailyAllowancesContext();\r\n  const {\r\n    payrun,\r\n    getPayrun,\r\n    payrun_loading,\r\n    payrun_error,\r\n    getSinglePayslip,\r\n    setEditPayslipID,\r\n    setIsPayslipEditingOn,\r\n    single_payslip,\r\n    setPayslipPeriod,\r\n    deletePayrun,\r\n    deletePayslip,\r\n    pending_payslips,\r\n    loadPendingPayslips,\r\n  } = usePayslipsContext();\r\n\r\n  useEffect(() => {\r\n    getPayrun();\r\n    // loadPendingPayslips(FILTERSTRING);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (single_payslip.payrun) {\r\n      console.log(\"single_payslip\", single_payslip);\r\n    }\r\n  }, [single_payslip]);\r\n\r\n  const handleAlertOpen = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const update_Input = async (data) => {\r\n    console.log(\"input\", data);\r\n    setInput({\r\n      ...input,\r\n      payfreq: data.payfreq,\r\n      fromdate: new Date(data.fromdate).toDateString(),\r\n      todate: data.todate,\r\n      paydate: data.paydate,\r\n      period: data.period,\r\n      payrun: data.payrun,\r\n    });\r\n    setInput({\r\n      ...input,\r\n      payfreq: data.payfreq,\r\n      fromdate: data.fromdate,\r\n      todate: data.todate,\r\n      paydate: data.paydate,\r\n      period: data.period,\r\n      payrun: data.payrun,\r\n    });\r\n    console.log(\"payrun\", input);\r\n  };\r\n\r\n  const update_Payslip = async (data) => {\r\n    console.log(\"data\", data);\r\n    const { id, payrun } = data;\r\n    setPayslipPeriod(payrun); //save to recoil\r\n    setEditPayslipID(id);\r\n    setIsPayslipEditingOn();\r\n    getSinglePayslip(id);\r\n\r\n    history.push(\"/payrunbatch\");\r\n  };\r\n\r\n  const delete_Payslip = (data) => {\r\n    const { id, payrun } = data;\r\n    setDeletestate({ id: id, payrun: payrun });\r\n    loadPeriodExpenses(payrun);\r\n    getSingleBatchDailyAllowance(payrun);\r\n    handleAlertOpen();\r\n  };\r\n\r\n  const handleOnDeleteConfirm = (data) => {\r\n    console.log(\"payslip delete\", deletestate);\r\n    const { id, payrun } = deletestate;\r\n\r\n    //load period expenses\r\n    loadPeriodExpenses(payrun);\r\n\r\n    //delete allows detls\r\n    pending_payslips.forEach((rec) => {\r\n      if (rec.payrun === payrun) {\r\n        deletePayslip(rec.id);\r\n      }\r\n    });\r\n    //delete allows batch\r\n    deletePayrun(id);\r\n    getPayrun();\r\n\r\n    //unpaid expenses\r\n    periodexpenses.forEach((rec) => {\r\n      if (rec.payrun === payrun) {\r\n        updateExpense({ id: rec.id, payrun: \"\" });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleVerifyPayslipData = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  if (payrun_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading.....Payslips</h2>\r\n      </div>\r\n    );\r\n  }\r\n  if (payrun_error) {\r\n    return (\r\n      <div>\r\n        <h2>Internet connection problem!</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={payrun}\r\n          title=\"Payroll\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n            Build: (props) => <BuildOutlinedIcon />,\r\n          }}\r\n          actions={[\r\n            (rowData) => ({\r\n              // disabled: rowData.status !== \"Pending\",\r\n              icon: \"edit\",\r\n              position: \"row\",\r\n              tooltip: \"Edit Record\",\r\n              onClick: (event, rowData) => {\r\n                update_Input(rowData);\r\n                update_Payslip(rowData);\r\n              },\r\n            }),\r\n            (rowData) => ({\r\n              // disabled: rowData.status === \"Approve\",\r\n              icon: \"delete\",\r\n              tooltip: \"Delete Record\",\r\n              position: \"row\",\r\n              onClick: (event, rowData) => {\r\n                //delete_Payslip(rowData);\r\n                delete_Payslip(rowData);\r\n              },\r\n            }),\r\n\r\n            // {\r\n            //   icon: \"add\",\r\n            //   tooltip: \"Add Record\",\r\n            //   isFreeAction: true,\r\n            //   onClick: (event, rowData) => {\r\n            //     add_Payslip(rowData);\r\n            //   },\r\n            // },\r\n          ]}\r\n          options={{\r\n            filtering: true,\r\n            selection: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ padding: \"5px 10px\" }}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={(e) => handleVerifyPayslipData(e)}\r\n                  >\r\n                    Verify <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n        <AlertDialog\r\n          handleClose={handleAlertClose}\r\n          onConfirm={handleOnDeleteConfirm}\r\n          isOpen={isAlertOpen}\r\n          title=\"Delete Payslip Batch\"\r\n        >\r\n          <h2>Are you sure you want to delete ?</h2>\r\n        </AlertDialog>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}