{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\Payrun.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MaterialTable from \"material-table\";\nimport clsx from \"clsx\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Paper, Grid, Icon, Divider, TextField, MenuItem } from \"@material-ui/core\";\nimport { useRecoilState } from \"recoil\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { payrunState } from \"./data/atomdata\"; //const drawerWidth = 240;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\",\n  cellStyle: {\n    width: 280,\n    maxWidth: 280\n  }\n}];\n\nconst Payrun = () => {\n  _s();\n\n  let history = useHistory();\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\n  const {\n    loadEmployees,\n    employees\n  } = useEmployeesContext();\n  const {\n    addPayrun,\n    getPayrun,\n    payrun,\n    addPayslip,\n    resetPayslipsData,\n    singlebatchpayslip,\n    singlebatch_payslip_loading,\n    getSingleBatchPayslip\n  } = usePayslipsContext();\n  const [input, setInput] = useRecoilState(payrunState);\n  const [alert, setAlert] = useState(false);\n  const [error, setError] = useState(false);\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\n\n  function formatDate(string) {\n    var options = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    };\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\n  }\n\n  function formatPayrun() {\n    const yy = input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\n    const mm = input.fromdate.substring(5, 7);\n    const d = input.fromdate;\n    console.log(\"payrun\", payrun);\n  }\n\n  const payrunExists = data => {\n    return payrun.some(function (el) {\n      return el.payrun === data;\n    });\n  };\n\n  const handleChange = e => {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handlePayrunSubmit = e => {\n    e.preventDefault();\n    const period = formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\n    const payrundata = input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\n    setInput({ ...input,\n      period: period,\n      payrun: payrundata\n    });\n    formatPayrun();\n    const isExist = payrunExists(payrundata);\n    console.log(\"isExist\", isExist);\n\n    if (isExist) {\n      console.log(\"exist\", payrundata);\n      setIsPayrunExist(true);\n      setAlert(true);\n    } else {\n      console.log(\"add\");\n      add_Payrun();\n      setIsPayrunExist(false);\n      setAlert(false);\n      setLoadPaybatch(true);\n    }\n  };\n\n  const checkSelectedEmployees = (period, payrun) => {\n    let items = [];\n    let payitems = [];\n    resetPayslipsData();\n    const paydata = singlebatchpayslip.map(e => e.name) || [];\n    employees && employees.forEach((emp, index) => {\n      if (emp.tableData.checked) {\n        const {\n          id,\n          name,\n          bank_name,\n          bank_acno,\n          basic_salary,\n          tap_acno,\n          scp_acno\n        } = emp;\n        const data = {\n          name: name,\n          period: period,\n          date: input.pay_date,\n          payrun: payrun,\n          wages: basic_salary,\n          nett_pay: nett_pay,\n          bank_name: bank_name,\n          bank_acno: bank_acno,\n          tap_acno: tap_acno,\n          tap_amount: tap_amount,\n          scp_acno: scp_acno,\n          scp_amount: scp_amount,\n          total_allowances: 0,\n          total_deductions: 0,\n          empid: id,\n          status: \"Pending\",\n          allows_type1: \"Basic Salary\",\n          allows_type1amt: basic_salary,\n          allows_type2: \"Site Allowances\",\n          allows_type2amt: 0,\n          allows_type3: \"Expenses Claims\",\n          allows_type3amt: 0,\n          allows_type4: \" \",\n          allows_type4amt: 0,\n          allows_type5: \" \",\n          allows_type5amt: 0,\n          allows_type6: \" \",\n          allows_type6amt: 0,\n          allows_type7: \" \",\n          allows_type7amt: 0,\n          allows_type8: \" \",\n          allows_type8amt: 0,\n          deducts_type1: \" \",\n          deducts_type1amt: 0,\n          deducts_type2: \" \",\n          deducts_type2amt: 0,\n          deducts_type3: \" \",\n          deducts_type3amt: 0,\n          deducts_type4: \" \",\n          deducts_type4amt: 0,\n          deducts_type5: \" \",\n          deducts_type5amt: 0,\n          deducts_type6: \" \",\n          deducts_type6amt: 0,\n          deducts_type7: \" \",\n          deducts_type7amt: 0,\n          deducts_type8: \" \",\n          deducts_type8amt: 0\n        };\n\n        if (paydata) {\n          const res = paydata.includes(emp.name);\n\n          if (!res) {\n            addPayslip({ ...data\n            });\n          }\n        } else {\n          addPayslip({ ...data\n          });\n        }\n      }\n    });\n  };\n\n  const handleNext = () => {\n    history.push(\"/payrunbatch\");\n  };\n\n  const add_Payrun = () => {\n    //update payrun\n    addPayrun({\n      pay_freq: input.payfreq,\n      from_date: input.fromdate,\n      to_date: input.todate,\n      pay_date: input.paydate,\n      period: input.period,\n      payrun: input.payrun\n    });\n    getPayrun();\n  };\n\n  useEffect(() => {\n    loadEmployees();\n    getPayrun();\n  }, []);\n  useEffect(() => {\n    getSingleBatchPayslip(input.payrun);\n\n    if (singlebatchpayslip) {\n      checkSelectedEmployees(input.period, input.payrun);\n      setLoadPaybatch(false);\n    }\n  }, [loadPaybatch]); //   useEffect(() => {\n  //     if (input.period && input.payrun) {\n  //       //add_Payrun();\n  //       setAlert(true);\n  //     }\n  //   }, [input]);\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: fixedHeightPaper,\n    style: {\n      backgroundColor: \"black\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.section,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        direction: \"row\",\n        container: true,\n        spacing: 1,\n        style: {\n          border: \"1px solid white\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          sm: 3,\n          direction: \"column\",\n          align: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"article\", {\n            className: classes.jobinfo,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Pay Run\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handlePayrunSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Pay Frequency\",\n                  variant: \"filled\",\n                  required: true,\n                  style: {\n                    width: 250\n                  },\n                  name: \"payfreq\",\n                  value: input.payfreq,\n                  onChange: e => handleChange(e),\n                  select: true,\n                  children: /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"Monthly\",\n                    children: \"Monthly\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"From Date\",\n                  variant: \"filled\",\n                  name: \"fromdate\",\n                  type: \"date\",\n                  value: input.fromdate,\n                  required: true,\n                  style: {\n                    width: 250\n                  },\n                  onChange: e => handleChange(e),\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"To Date\",\n                  variant: \"filled\",\n                  type: \"date\",\n                  name: \"todate\",\n                  value: input.todate,\n                  required: true,\n                  onChange: e => handleChange(e),\n                  style: {\n                    width: 250\n                  },\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Payment Date\",\n                  variant: \"filled\",\n                  type: \"date\",\n                  name: \"paydate\",\n                  value: input.paydate,\n                  required: true,\n                  style: {\n                    width: 250\n                  },\n                  onChange: e => handleChange(e),\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"primary\",\n                  className: classes.button,\n                  children: [\"Submit \", /*#__PURE__*/_jsxDEV(Icon, {\n                    className: classes.rightIcon,\n                    children: \"send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 19\n                }, this), alert && !isPayrunExist && /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"primary\",\n                  className: classes.button,\n                  onClick: handleNext,\n                  children: [\"Next \", /*#__PURE__*/_jsxDEV(Icon, {\n                    className: classes.rightIcon,\n                    children: \"send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [alert && !isPayrunExist && !singlebatch_payslip_loading && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"New Payrun being added!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 21\n                }, this), alert && isPayrunExist && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"This payrun already existed!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: error && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"This Payrun period already existed!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          orientation: \"vertical\",\n          flexItem: true,\n          style: {\n            background: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          sm: 8,\n          align: \"right\",\n          children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n            columns: columns,\n            data: employees,\n            title: \"Payrun History\",\n            options: {\n              filtering: false,\n              search: false,\n              toolbar: false,\n              selection: true,\n              headerStyle: {\n                backgroundColor: \"orange\",\n                color: \"primary\"\n              },\n              showTitle: false\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Payrun, \"L8kHIFJ6jNImwryTF8L6Z4CddiA=\", false, function () {\n  return [useHistory, useStyles, useEmployeesContext, usePayslipsContext, useRecoilState];\n});\n\n_c = Payrun;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  container: {\n    margin: 0,\n    padding: 0,\n    width: \"80vw\",\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\n    gridAutoRows: \"10px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    justifyContent: \"center\",\n    backgroundColor: \"primary\"\n  },\n  fixedHeight: {\n    height: 800\n  },\n  paper: {\n    padding: theme.spacing(10),\n    // display: \"flex\",\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n    border: \"1px solid\",\n    width: \"100%\",\n    color: \"primary\",\n    bcakgroundColor: \"black\"\n  },\n  card: {\n    backgroundColor: \"black\"\n  },\n  section: {\n    width: \"95vw\",\n    margin: \"5rem auto\",\n    maxWidth: \"var(--max-width)\"\n  },\n  underline: {\n    width: \"5rem\",\n    height: \"0.25rem\",\n    marginBottom: \"1.25rem\",\n    background: \"var(--clr-primary-5)\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  title: {\n    marginbottom: \"4rem\",\n    textAlign: \"center\"\n  },\n  jobscenter: {\n    width: \"80vw\",\n    margin: \"0 auto\",\n    maxWidth: \"var(--max-width)\",\n    flexDirection: \"row\"\n  },\n  btncontainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginBottom: \"4rem\",\n    flexWrap: \"wrap\"\n  },\n  jobbtn: {\n    background: \"transparent\",\n    borderColor: \"transparent\",\n    textTransform: \"capitalize\",\n    fontSize: \"1.25rem\",\n    letterSpacing: \"var(--spacing)\",\n    margin: \"0 0.5rem\",\n    transition: \"var(--transition)\",\n    cursor: \"pointer\",\n    padding: \"0.25rem 0\",\n    lineHeight: \"1\",\n    outlineColor: \"var(--clr-primary-10)\",\n    \"&:hover\": {\n      color: \"var(--clr-primary-5)\",\n      boxShadow: \"0 2px var(--clr-primary-5)\"\n    }\n  },\n  activebtn: {\n    color: \"var(--clr-primary-5)\",\n    boxShadow: \"0 2px var(--clr-primary-5)\"\n  },\n  jobinfo: {\n    fontWeight: \"400\"\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\nexport default Payrun;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payrun\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/Payrun.js"],"names":["React","useState","useEffect","makeStyles","MaterialTable","clsx","useHistory","Button","Paper","Grid","Icon","Divider","TextField","MenuItem","useRecoilState","useEmployeesContext","usePayslipsContext","payrunState","columns","title","field","editable","cellStyle","width","maxWidth","Payrun","history","classes","useStyles","fixedHeightPaper","paper","fixedHeight","loadPaybatch","setLoadPaybatch","loadEmployees","employees","addPayrun","getPayrun","payrun","addPayslip","resetPayslipsData","singlebatchpayslip","singlebatch_payslip_loading","getSingleBatchPayslip","input","setInput","alert","setAlert","error","setError","isPayrunExist","setIsPayrunExist","formatDate","string","options","year","month","day","Date","toLocaleDateString","formatPayrun","yy","fromdate","substring","mm","d","console","log","payrunExists","data","some","el","handleChange","e","target","name","value","handlePayrunSubmit","preventDefault","period","todate","payrundata","isExist","add_Payrun","checkSelectedEmployees","items","payitems","paydata","map","forEach","emp","index","tableData","checked","id","bank_name","bank_acno","basic_salary","tap_acno","scp_acno","date","pay_date","wages","nett_pay","tap_amount","scp_amount","total_allowances","total_deductions","empid","status","allows_type1","allows_type1amt","allows_type2","allows_type2amt","allows_type3","allows_type3amt","allows_type4","allows_type4amt","allows_type5","allows_type5amt","allows_type6","allows_type6amt","allows_type7","allows_type7amt","allows_type8","allows_type8amt","deducts_type1","deducts_type1amt","deducts_type2","deducts_type2amt","deducts_type3","deducts_type3amt","deducts_type4","deducts_type4amt","deducts_type5","deducts_type5amt","deducts_type6","deducts_type6amt","deducts_type7","deducts_type7amt","deducts_type8","deducts_type8amt","res","includes","handleNext","push","pay_freq","payfreq","from_date","to_date","paydate","backgroundColor","section","border","jobinfo","shrink","button","rightIcon","background","filtering","search","toolbar","selection","headerStyle","color","showTitle","theme","root","flexGrow","margin","spacing","container","padding","display","gridTemplateColumns","gridAutoRows","position","left","transform","justifyContent","height","overflow","flexDirection","bcakgroundColor","card","underline","marginBottom","marginLeft","marginRight","marginbottom","textAlign","jobscenter","btncontainer","flexWrap","jobbtn","borderColor","textTransform","fontSize","letterSpacing","transition","cursor","lineHeight","outlineColor","boxShadow","activebtn","fontWeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SACEC,MADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,OALF,EAMEC,SANF,EAOEC,QAPF,QAQO,mBARP;AASA,SAASC,cAAT,QAA+B,QAA/B;AAEA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,WAAT,QAA4B,iBAA5B,C,CAEA;;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,QAAQ,EAAE,OAHZ;AAIEC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,GADE;AAETC,IAAAA,QAAQ,EAAE;AAFD;AAJb,CADc,CAAhB;;AAYA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,MAAIC,OAAO,GAAGpB,UAAU,EAAxB;AACA,QAAMqB,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAMC,gBAAgB,GAAGxB,IAAI,CAACsB,OAAO,CAACG,KAAT,EAAgBH,OAAO,CAACI,WAAxB,CAA7B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChC,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEiC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA+BpB,mBAAmB,EAAxD;AACA,QAAM;AACJqB,IAAAA,SADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA,kBANI;AAOJC,IAAAA,2BAPI;AAQJC,IAAAA;AARI,MASF3B,kBAAkB,EATtB;AAUA,QAAM,CAAC4B,KAAD,EAAQC,QAAR,IAAoB/B,cAAc,CAACG,WAAD,CAAxC;AACA,QAAM,CAAC6B,KAAD,EAAQC,QAAR,IAAoB9C,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC+C,KAAD,EAAQC,QAAR,IAAoBhD,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACiD,aAAD,EAAgBC,gBAAhB,IAAoClD,QAAQ,CAAC,KAAD,CAAlD;;AAEA,WAASmD,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,QAAIC,OAAO,GAAG;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,KAAK,EAAE,MAA1B;AAAkCC,MAAAA,GAAG,EAAE;AAAvC,KAAd;AACA,WAAO,IAAIC,IAAJ,CAASL,MAAT,EAAiBM,kBAAjB,CAAoC,OAApC,EAA6CL,OAA7C,CAAP;AACD;;AAED,WAASM,YAAT,GAAwB;AACtB,UAAMC,EAAE,GACNjB,KAAK,CAACkB,QAAN,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,IAAiC,GAAjC,GAAuCnB,KAAK,CAACkB,QAAN,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,CADzC;AAEA,UAAMC,EAAE,GAAGpB,KAAK,CAACkB,QAAN,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,CAAX;AACA,UAAME,CAAC,GAAGrB,KAAK,CAACkB,QAAhB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB7B,MAAtB;AACD;;AAED,QAAM8B,YAAY,GAAIC,IAAD,IAAU;AAC7B,WAAO/B,MAAM,CAACgC,IAAP,CAAY,UAAUC,EAAV,EAAc;AAC/B,aAAOA,EAAE,CAACjC,MAAH,KAAc+B,IAArB;AACD,KAFM,CAAP;AAGD,GAJD;;AAKA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1B5B,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAY,OAAC6B,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAtC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAIJ,CAAD,IAAO;AAChCA,IAAAA,CAAC,CAACK,cAAF;AAEA,UAAMC,MAAM,GACV3B,UAAU,CAACR,KAAK,CAACkB,QAAP,CAAV,GAA6B,KAA7B,GAAqCV,UAAU,CAACR,KAAK,CAACoC,MAAP,CADjD;AAEA,UAAMC,UAAU,GACdrC,KAAK,CAACkB,QAAN,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,IAAiC,GAAjC,GAAuCnB,KAAK,CAACkB,QAAN,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,CADzC;AAEAlB,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYmC,MAAAA,MAAM,EAAEA,MAApB;AAA4BzC,MAAAA,MAAM,EAAE2C;AAApC,KAAD,CAAR;AACArB,IAAAA,YAAY;AAEZ,UAAMsB,OAAO,GAAGd,YAAY,CAACa,UAAD,CAA5B;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBe,OAAvB;;AACA,QAAIA,OAAJ,EAAa;AACXhB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBc,UAArB;AACA9B,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAJ,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAJD,MAIO;AACLmB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAgB,MAAAA,UAAU;AACVhC,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAJ,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAd,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAvBD;;AAyBA,QAAMmD,sBAAsB,GAAG,CAACL,MAAD,EAASzC,MAAT,KAAoB;AACjD,QAAI+C,KAAK,GAAG,EAAZ;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA9C,IAAAA,iBAAiB;AACjB,UAAM+C,OAAO,GAAG9C,kBAAkB,CAAC+C,GAAnB,CAAwBf,CAAD,IAAOA,CAAC,CAACE,IAAhC,KAAyC,EAAzD;AAEAxC,IAAAA,SAAS,IACPA,SAAS,CAACsD,OAAV,CAAkB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChC,UAAID,GAAG,CAACE,SAAJ,CAAcC,OAAlB,EAA2B;AACzB,cAAM;AACJC,UAAAA,EADI;AAEJnB,UAAAA,IAFI;AAGJoB,UAAAA,SAHI;AAIJC,UAAAA,SAJI;AAKJC,UAAAA,YALI;AAMMC,UAAAA,QANN;AAQJC,UAAAA;AARI,YAUFT,GAVJ;AAWA,cAAMrB,IAAI,GAAG;AACXM,UAAAA,IAAI,EAAEA,IADK;AAEXI,UAAAA,MAAM,EAAEA,MAFG;AAGXqB,UAAAA,IAAI,EAAExD,KAAK,CAACyD,QAHD;AAIX/D,UAAAA,MAAM,EAAEA,MAJG;AAKXgE,UAAAA,KAAK,EAAEL,YALI;AAMXM,UAAAA,QAAQ,EAAEA,QANC;AAOXR,UAAAA,SAAS,EAAEA,SAPA;AAQXC,UAAAA,SAAS,EAAEA,SARA;AASXE,UAAAA,QAAQ,EAAEA,QATC;AAUXM,UAAAA,UAAU,EAAEA,UAVD;AAWXL,UAAAA,QAAQ,EAAEA,QAXC;AAYXM,UAAAA,UAAU,EAAEA,UAZD;AAaXC,UAAAA,gBAAgB,EAAE,CAbP;AAcXC,UAAAA,gBAAgB,EAAE,CAdP;AAeXC,UAAAA,KAAK,EAAEd,EAfI;AAgBXe,UAAAA,MAAM,EAAE,SAhBG;AAiBXC,UAAAA,YAAY,EAAE,cAjBH;AAkBXC,UAAAA,eAAe,EAAEd,YAlBN;AAmBXe,UAAAA,YAAY,EAAE,iBAnBH;AAoBXC,UAAAA,eAAe,EAAE,CApBN;AAqBXC,UAAAA,YAAY,EAAE,iBArBH;AAsBXC,UAAAA,eAAe,EAAE,CAtBN;AAuBXC,UAAAA,YAAY,EAAE,GAvBH;AAwBXC,UAAAA,eAAe,EAAE,CAxBN;AAyBXC,UAAAA,YAAY,EAAE,GAzBH;AA0BXC,UAAAA,eAAe,EAAE,CA1BN;AA2BXC,UAAAA,YAAY,EAAE,GA3BH;AA4BXC,UAAAA,eAAe,EAAE,CA5BN;AA6BXC,UAAAA,YAAY,EAAE,GA7BH;AA8BXC,UAAAA,eAAe,EAAE,CA9BN;AA+BXC,UAAAA,YAAY,EAAE,GA/BH;AAgCXC,UAAAA,eAAe,EAAE,CAhCN;AAiCXC,UAAAA,aAAa,EAAE,GAjCJ;AAkCXC,UAAAA,gBAAgB,EAAE,CAlCP;AAmCXC,UAAAA,aAAa,EAAE,GAnCJ;AAoCXC,UAAAA,gBAAgB,EAAE,CApCP;AAqCXC,UAAAA,aAAa,EAAE,GArCJ;AAsCXC,UAAAA,gBAAgB,EAAE,CAtCP;AAuCXC,UAAAA,aAAa,EAAE,GAvCJ;AAwCXC,UAAAA,gBAAgB,EAAE,CAxCP;AAyCXC,UAAAA,aAAa,EAAE,GAzCJ;AA0CXC,UAAAA,gBAAgB,EAAE,CA1CP;AA2CXC,UAAAA,aAAa,EAAE,GA3CJ;AA4CXC,UAAAA,gBAAgB,EAAE,CA5CP;AA6CXC,UAAAA,aAAa,EAAE,GA7CJ;AA8CXC,UAAAA,gBAAgB,EAAE,CA9CP;AA+CXC,UAAAA,aAAa,EAAE,GA/CJ;AAgDXC,UAAAA,gBAAgB,EAAE;AAhDP,SAAb;;AAkDA,YAAItD,OAAJ,EAAa;AACX,gBAAMuD,GAAG,GAAGvD,OAAO,CAACwD,QAAR,CAAiBrD,GAAG,CAACf,IAArB,CAAZ;;AACA,cAAI,CAACmE,GAAL,EAAU;AACRvG,YAAAA,UAAU,CAAC,EAAE,GAAG8B;AAAL,aAAD,CAAV;AACD;AACF,SALD,MAKO;AACL9B,UAAAA,UAAU,CAAC,EAAE,GAAG8B;AAAL,WAAD,CAAV;AACD;AACF;AACF,KAxED,CADF;AA0ED,GAhFD;;AAkFA,QAAM2E,UAAU,GAAG,MAAM;AACvBtH,IAAAA,OAAO,CAACuH,IAAR,CAAa,cAAb;AACD,GAFD;;AAIA,QAAM9D,UAAU,GAAG,MAAM;AACvB;AACA/C,IAAAA,SAAS,CAAC;AACR8G,MAAAA,QAAQ,EAAEtG,KAAK,CAACuG,OADR;AAERC,MAAAA,SAAS,EAAExG,KAAK,CAACkB,QAFT;AAGRuF,MAAAA,OAAO,EAAEzG,KAAK,CAACoC,MAHP;AAIRqB,MAAAA,QAAQ,EAAEzD,KAAK,CAAC0G,OAJR;AAKRvE,MAAAA,MAAM,EAAEnC,KAAK,CAACmC,MALN;AAMRzC,MAAAA,MAAM,EAAEM,KAAK,CAACN;AANN,KAAD,CAAT;AAQAD,IAAAA,SAAS;AACV,GAXD;;AAaAnC,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,aAAa;AACbG,IAAAA,SAAS;AACV,GAHQ,EAGN,EAHM,CAAT;AAKAnC,EAAAA,SAAS,CAAC,MAAM;AACdyC,IAAAA,qBAAqB,CAACC,KAAK,CAACN,MAAP,CAArB;;AACA,QAAIG,kBAAJ,EAAwB;AACtB2C,MAAAA,sBAAsB,CAACxC,KAAK,CAACmC,MAAP,EAAenC,KAAK,CAACN,MAArB,CAAtB;AACAL,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GANQ,EAMN,CAACD,YAAD,CANM,CAAT,CA5KmB,CAoLnB;AACA;AACA;AAEA;AACA;AACA;;AAEA,sBACE,QAAC,KAAD;AAAO,IAAA,SAAS,EAAEH,gBAAlB;AAAoC,IAAA,KAAK,EAAE;AAAE0H,MAAAA,eAAe,EAAE;AAAnB,KAA3C;AAAA,2BACE;AAAS,MAAA,SAAS,EAAE5H,OAAO,CAAC6H,OAA5B;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,SAAS,EAAC,KADZ;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,OAAO,EAAE,CAHX;AAIE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAJT;AAAA,gCAME,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,IAAI,MAApB;AAAqB,UAAA,EAAE,EAAE,CAAzB;AAA4B,UAAA,SAAS,EAAC,QAAtC;AAA+C,UAAA,KAAK,EAAC,MAArD;AAAA,iCACE;AAAS,YAAA,SAAS,EAAE9H,OAAO,CAAC+H,OAA5B;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAM,cAAA,QAAQ,EAAE7E,kBAAhB;AAAA,sCACE;AAAA,uCACE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAC,eADR;AAEE,kBAAA,OAAO,EAAC,QAFV;AAGE,kBAAA,QAAQ,MAHV;AAIE,kBAAA,KAAK,EAAE;AAAEtD,oBAAAA,KAAK,EAAE;AAAT,mBAJT;AAKE,kBAAA,IAAI,EAAC,SALP;AAME,kBAAA,KAAK,EAAEqB,KAAK,CAACuG,OANf;AAOE,kBAAA,QAAQ,EAAG1E,CAAD,IAAOD,YAAY,CAACC,CAAD,CAP/B;AAQE,kBAAA,MAAM,MARR;AAAA,yCAWE,QAAC,QAAD;AAAU,oBAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAgBE;AAAA,uCACE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAC,WADR;AAEE,kBAAA,OAAO,EAAC,QAFV;AAGE,kBAAA,IAAI,EAAC,UAHP;AAIE,kBAAA,IAAI,EAAC,MAJP;AAKE,kBAAA,KAAK,EAAE7B,KAAK,CAACkB,QALf;AAME,kBAAA,QAAQ,MANV;AAOE,kBAAA,KAAK,EAAE;AAAEvC,oBAAAA,KAAK,EAAE;AAAT,mBAPT;AAQE,kBAAA,QAAQ,EAAGkD,CAAD,IAAOD,YAAY,CAACC,CAAD,CAR/B;AASE,kBAAA,eAAe,EAAE;AACfkF,oBAAAA,MAAM,EAAE;AADO;AATnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAhBF,eA+BE;AAAA,uCACE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAC,SADR;AAEE,kBAAA,OAAO,EAAC,QAFV;AAGE,kBAAA,IAAI,EAAC,MAHP;AAIE,kBAAA,IAAI,EAAC,QAJP;AAKE,kBAAA,KAAK,EAAE/G,KAAK,CAACoC,MALf;AAME,kBAAA,QAAQ,MANV;AAOE,kBAAA,QAAQ,EAAGP,CAAD,IAAOD,YAAY,CAACC,CAAD,CAP/B;AAQE,kBAAA,KAAK,EAAE;AAAElD,oBAAAA,KAAK,EAAE;AAAT,mBART;AASE,kBAAA,eAAe,EAAE;AACfoI,oBAAAA,MAAM,EAAE;AADO;AATnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA/BF,eA8CE;AAAA,uCACE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAC,cADR;AAEE,kBAAA,OAAO,EAAC,QAFV;AAGE,kBAAA,IAAI,EAAC,MAHP;AAIE,kBAAA,IAAI,EAAC,SAJP;AAKE,kBAAA,KAAK,EAAE/G,KAAK,CAAC0G,OALf;AAME,kBAAA,QAAQ,MANV;AAOE,kBAAA,KAAK,EAAE;AAAE/H,oBAAAA,KAAK,EAAE;AAAT,mBAPT;AAQE,kBAAA,QAAQ,EAAGkD,CAAD,IAAOD,YAAY,CAACC,CAAD,CAR/B;AASE,kBAAA,eAAe,EAAE;AACfkF,oBAAAA,MAAM,EAAE;AADO;AATnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA9CF,eA6DE;AAAA,wCACE,QAAC,MAAD;AACE,kBAAA,IAAI,EAAC,QADP;AAEE,kBAAA,OAAO,EAAC,WAFV;AAGE,kBAAA,KAAK,EAAC,SAHR;AAIE,kBAAA,SAAS,EAAEhI,OAAO,CAACiI,MAJrB;AAAA,qDAMS,QAAC,IAAD;AAAM,oBAAA,SAAS,EAAEjI,OAAO,CAACkI,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANT;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EASG/G,KAAK,IAAI,CAACI,aAAV,iBACC,QAAC,MAAD;AACE,kBAAA,IAAI,EAAC,QADP;AAEE,kBAAA,OAAO,EAAC,WAFV;AAGE,kBAAA,KAAK,EAAC,SAHR;AAIE,kBAAA,SAAS,EAAEvB,OAAO,CAACiI,MAJrB;AAKE,kBAAA,OAAO,EAAEZ,UALX;AAAA,mDAOO,QAAC,IAAD;AAAM,oBAAA,SAAS,EAAErH,OAAO,CAACkI,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPP;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7DF,eAkFE;AAAA,2BACG/G,KAAK,IAAI,CAACI,aAAV,IAA2B,CAACR,2BAA5B,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,EAIGI,KAAK,IAAII,aAAT,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlFF,eA0FE;AAAA,0BACGF,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADZ;AAAA;AAAA;AAAA;AAAA,sBA1FF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF,eAyGE,QAAC,OAAD;AACE,UAAA,WAAW,EAAC,UADd;AAEE,UAAA,QAAQ,MAFV;AAGE,UAAA,KAAK,EAAE;AAAE8G,YAAAA,UAAU,EAAE;AAAd;AAHT;AAAA;AAAA;AAAA;AAAA,gBAzGF,eA8GE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,IAAI,MAApB;AAAqB,UAAA,EAAE,EAAE,CAAzB;AAA4B,UAAA,KAAK,EAAC,OAAlC;AAAA,iCACE,QAAC,aAAD;AACE,YAAA,OAAO,EAAE5I,OADX;AAEE,YAAA,IAAI,EAAEiB,SAFR;AAGE,YAAA,KAAK,EAAC,gBAHR;AAIE,YAAA,OAAO,EAAE;AACP4H,cAAAA,SAAS,EAAE,KADJ;AAEPC,cAAAA,MAAM,EAAE,KAFD;AAGPC,cAAAA,OAAO,EAAE,KAHF;AAIPC,cAAAA,SAAS,EAAE,IAJJ;AAKPC,cAAAA,WAAW,EAAE;AACXZ,gBAAAA,eAAe,EAAE,QADN;AAEXa,gBAAAA,KAAK,EAAE;AAFI,eALN;AASPC,cAAAA,SAAS,EAAE;AATJ;AAJX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBA9GF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuID,CAnUD;;GAAM5I,M;UACUnB,U,EACEsB,S,EAGqBb,mB,EAUjCC,kB,EACsBF,c;;;KAhBtBW,M;AAqUN,MAAMG,SAAS,GAAGzB,UAAU,CAAEmK,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADiC;AAIvCZ,EAAAA,MAAM,EAAE;AACNa,IAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AADF,GAJ+B;AAOvCC,EAAAA,SAAS,EAAE;AACTF,IAAAA,MAAM,EAAE,CADC;AAETG,IAAAA,OAAO,EAAE,CAFA;AAGTrJ,IAAAA,KAAK,EAAE,MAHE;AAITsJ,IAAAA,OAAO,EAAE,MAJA;AAKTC,IAAAA,mBAAmB,EAAE,yBALZ;AAMTC,IAAAA,YAAY,EAAE,MANL;AAOTC,IAAAA,QAAQ,EAAE,UAPD;AAQTC,IAAAA,IAAI,EAAE,KARG;AASTC,IAAAA,SAAS,EAAE,kBATF;AAUTC,IAAAA,cAAc,EAAE,QAVP;AAWT5B,IAAAA,eAAe,EAAE;AAXR,GAP4B;AAoBvCxH,EAAAA,WAAW,EAAE;AACXqJ,IAAAA,MAAM,EAAE;AADG,GApB0B;AAuBvCtJ,EAAAA,KAAK,EAAE;AACL8I,IAAAA,OAAO,EAAEN,KAAK,CAACI,OAAN,CAAc,EAAd,CADJ;AAEL;AACAG,IAAAA,OAAO,EAAE,MAHJ;AAILQ,IAAAA,QAAQ,EAAE,MAJL;AAKLC,IAAAA,aAAa,EAAE,QALV;AAML7B,IAAAA,MAAM,EAAE,WANH;AAOLlI,IAAAA,KAAK,EAAE,MAPF;AAQL6I,IAAAA,KAAK,EAAE,SARF;AASLmB,IAAAA,eAAe,EAAE;AATZ,GAvBgC;AAkCvCC,EAAAA,IAAI,EAAE;AACJjC,IAAAA,eAAe,EAAE;AADb,GAlCiC;AAqCvCC,EAAAA,OAAO,EAAE;AACPjI,IAAAA,KAAK,EAAE,MADA;AAEPkJ,IAAAA,MAAM,EAAE,WAFD;AAGPjJ,IAAAA,QAAQ,EAAE;AAHH,GArC8B;AA0CvCiK,EAAAA,SAAS,EAAE;AACTlK,IAAAA,KAAK,EAAE,MADE;AAET6J,IAAAA,MAAM,EAAE,SAFC;AAGTM,IAAAA,YAAY,EAAE,SAHL;AAIT5B,IAAAA,UAAU,EAAE,sBAJH;AAKT6B,IAAAA,UAAU,EAAE,MALH;AAMTC,IAAAA,WAAW,EAAE;AANJ,GA1C4B;AAkDvCzK,EAAAA,KAAK,EAAE;AACL0K,IAAAA,YAAY,EAAE,MADT;AAELC,IAAAA,SAAS,EAAE;AAFN,GAlDgC;AAsDvCC,EAAAA,UAAU,EAAE;AACVxK,IAAAA,KAAK,EAAE,MADG;AAEVkJ,IAAAA,MAAM,EAAE,QAFE;AAGVjJ,IAAAA,QAAQ,EAAE,kBAHA;AAIV8J,IAAAA,aAAa,EAAE;AAJL,GAtD2B;AA4DvCU,EAAAA,YAAY,EAAE;AACZnB,IAAAA,OAAO,EAAE,MADG;AAEZS,IAAAA,aAAa,EAAE,KAFH;AAGZH,IAAAA,cAAc,EAAE,QAHJ;AAIZO,IAAAA,YAAY,EAAE,MAJF;AAKZO,IAAAA,QAAQ,EAAE;AALE,GA5DyB;AAmEvCC,EAAAA,MAAM,EAAE;AACNpC,IAAAA,UAAU,EAAE,aADN;AAENqC,IAAAA,WAAW,EAAE,aAFP;AAGNC,IAAAA,aAAa,EAAE,YAHT;AAINC,IAAAA,QAAQ,EAAE,SAJJ;AAKNC,IAAAA,aAAa,EAAE,gBALT;AAMN7B,IAAAA,MAAM,EAAE,UANF;AAON8B,IAAAA,UAAU,EAAE,mBAPN;AAQNC,IAAAA,MAAM,EAAE,SARF;AASN5B,IAAAA,OAAO,EAAE,WATH;AAUN6B,IAAAA,UAAU,EAAE,GAVN;AAWNC,IAAAA,YAAY,EAAE,uBAXR;AAYN,eAAW;AACTtC,MAAAA,KAAK,EAAE,sBADE;AAETuC,MAAAA,SAAS,EAAE;AAFF;AAZL,GAnE+B;AAoFvCC,EAAAA,SAAS,EAAE;AACTxC,IAAAA,KAAK,EAAE,sBADE;AAETuC,IAAAA,SAAS,EAAE;AAFF,GApF4B;AAwFvCjD,EAAAA,OAAO,EAAE;AACPmD,IAAAA,UAAU,EAAE;AADL,GAxF8B;AA2FvChD,EAAAA,SAAS,EAAE;AACT8B,IAAAA,UAAU,EAAErB,KAAK,CAACI,OAAN,CAAc,CAAd;AADH;AA3F4B,CAAZ,CAAD,CAA5B;AAgGA,eAAejJ,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport clsx from \"clsx\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Icon,\r\n  Divider,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { payrunState } from \"./data/atomdata\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 280,\r\n      maxWidth: 280,\r\n    },\r\n  },\r\n];\r\n\r\nconst Payrun = () => {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const {\r\n    addPayrun,\r\n    getPayrun,\r\n    payrun,\r\n    addPayslip,\r\n    resetPayslipsData,\r\n    singlebatchpayslip,\r\n    singlebatch_payslip_loading,\r\n    getSingleBatchPayslip,\r\n  } = usePayslipsContext();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [alert, setAlert] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\r\n\r\n  function formatDate(string) {\r\n    var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\r\n  }\r\n\r\n  function formatPayrun() {\r\n    const yy =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    const mm = input.fromdate.substring(5, 7);\r\n    const d = input.fromdate;\r\n    console.log(\"payrun\", payrun);\r\n  }\r\n\r\n  const payrunExists = (data) => {\r\n    return payrun.some(function (el) {\r\n      return el.payrun === data;\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePayrunSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const period =\r\n      formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\r\n    const payrundata =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({ ...input, period: period, payrun: payrundata });\r\n    formatPayrun();\r\n\r\n    const isExist = payrunExists(payrundata);\r\n    console.log(\"isExist\", isExist);\r\n    if (isExist) {\r\n      console.log(\"exist\", payrundata);\r\n      setIsPayrunExist(true);\r\n      setAlert(true);\r\n    } else {\r\n      console.log(\"add\");\r\n      add_Payrun();\r\n      setIsPayrunExist(false);\r\n      setAlert(false);\r\n      setLoadPaybatch(true);\r\n    }\r\n  };\r\n\r\n  const checkSelectedEmployees = (period, payrun) => {\r\n    let items = [];\r\n    let payitems = [];\r\n    resetPayslipsData();\r\n    const paydata = singlebatchpayslip.map((e) => e.name) || [];\r\n\r\n    employees &&\r\n      employees.forEach((emp, index) => {\r\n        if (emp.tableData.checked) {\r\n          const {\r\n            id,\r\n            name,\r\n            bank_name,\r\n            bank_acno,\r\n            basic_salary,\r\n                      tap_acno,\r\n           \r\n            scp_acno,\r\n           \r\n          } = emp;\r\n          const data = {\r\n            name: name,\r\n            period: period,\r\n            date: input.pay_date,\r\n            payrun: payrun,\r\n            wages: basic_salary,\r\n            nett_pay: nett_pay,\r\n            bank_name: bank_name,\r\n            bank_acno: bank_acno,\r\n            tap_acno: tap_acno,\r\n            tap_amount: tap_amount,\r\n            scp_acno: scp_acno,\r\n            scp_amount: scp_amount,\r\n            total_allowances: 0,\r\n            total_deductions: 0,\r\n            empid: id,\r\n            status: \"Pending\",\r\n            allows_type1: \"Basic Salary\",\r\n            allows_type1amt: basic_salary,\r\n            allows_type2: \"Site Allowances\",\r\n            allows_type2amt: 0,\r\n            allows_type3: \"Expenses Claims\",\r\n            allows_type3amt: 0,\r\n            allows_type4: \" \",\r\n            allows_type4amt: 0,\r\n            allows_type5: \" \",\r\n            allows_type5amt: 0,\r\n            allows_type6: \" \",\r\n            allows_type6amt: 0,\r\n            allows_type7: \" \",\r\n            allows_type7amt: 0,\r\n            allows_type8: \" \",\r\n            allows_type8amt: 0,\r\n            deducts_type1: \" \",\r\n            deducts_type1amt: 0,\r\n            deducts_type2: \" \",\r\n            deducts_type2amt: 0,\r\n            deducts_type3: \" \",\r\n            deducts_type3amt: 0,\r\n            deducts_type4: \" \",\r\n            deducts_type4amt: 0,\r\n            deducts_type5: \" \",\r\n            deducts_type5amt: 0,\r\n            deducts_type6: \" \",\r\n            deducts_type6amt: 0,\r\n            deducts_type7: \" \",\r\n            deducts_type7amt: 0,\r\n            deducts_type8: \" \",\r\n            deducts_type8amt: 0,\r\n          };\r\n          if (paydata) {\r\n            const res = paydata.includes(emp.name);\r\n            if (!res) {\r\n              addPayslip({ ...data });\r\n            }\r\n          } else {\r\n            addPayslip({ ...data });\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    history.push(\"/payrunbatch\");\r\n  };\r\n\r\n  const add_Payrun = () => {\r\n    //update payrun\r\n    addPayrun({\r\n      pay_freq: input.payfreq,\r\n      from_date: input.fromdate,\r\n      to_date: input.todate,\r\n      pay_date: input.paydate,\r\n      period: input.period,\r\n      payrun: input.payrun,\r\n    });\r\n    getPayrun();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    getPayrun();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslip(input.payrun);\r\n    if (singlebatchpayslip) {\r\n      checkSelectedEmployees(input.period, input.payrun);\r\n      setLoadPaybatch(false);\r\n    }\r\n  }, [loadPaybatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (input.period && input.payrun) {\r\n  //       //add_Payrun();\r\n\r\n  //       setAlert(true);\r\n  //     }\r\n  //   }, [input]);\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"black\" }}>\r\n      <section className={classes.section}>\r\n        <Grid\r\n          direction=\"row\"\r\n          container\r\n          spacing={1}\r\n          style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Grid container item sm={3} direction=\"column\" align=\"left\">\r\n            <article className={classes.jobinfo}>\r\n              <h2>Pay Run</h2>\r\n              <form onSubmit={handlePayrunSubmit}>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Pay Frequency\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    style={{ width: 250 }}\r\n                    name=\"payfreq\"\r\n                    value={input.payfreq}\r\n                    onChange={(e) => handleChange(e)}\r\n                    select\r\n                  >\r\n                    {/* <MenuItem value=\"Weekly\">Weekly</MenuItem> */}\r\n                    <MenuItem value=\"Monthly\">Monthly</MenuItem>\r\n                  </TextField>\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    variant=\"filled\"\r\n                    name=\"fromdate\"\r\n                    type=\"date\"\r\n                    value={input.fromdate}\r\n                    required\r\n                    style={{ width: 250 }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"todate\"\r\n                    value={input.todate}\r\n                    required\r\n                    onChange={(e) => handleChange(e)}\r\n                    style={{ width: 250 }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Payment Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"paydate\"\r\n                    value={input.paydate}\r\n                    required\r\n                    style={{ width: 250 }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {alert && !isPayrunExist && (\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={handleNext}\r\n                    >\r\n                      Next <Icon className={classes.rightIcon}>send</Icon>\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {alert && !isPayrunExist && !singlebatch_payslip_loading && (\r\n                    <h3>New Payrun being added!</h3>\r\n                  )}\r\n                  {alert && isPayrunExist && (\r\n                    <h3>This payrun already existed!</h3>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {error && <h3>This Payrun period already existed!</h3>}\r\n                </div>\r\n              </form>\r\n            </article>\r\n          </Grid>\r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            style={{ background: \"white\" }}\r\n          />\r\n          <Grid container item sm={8} align=\"right\">\r\n            <MaterialTable\r\n              columns={columns}\r\n              data={employees}\r\n              title=\"Payrun History\"\r\n              options={{\r\n                filtering: false,\r\n                search: false,\r\n                toolbar: false,\r\n                selection: true,\r\n                headerStyle: {\r\n                  backgroundColor: \"orange\",\r\n                  color: \"primary\",\r\n                },\r\n                showTitle: false,\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </section>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default Payrun;\r\n"]},"metadata":{},"sourceType":"module"}