{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\context\\\\payslips_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport reducer from \"../reducers/payslips_reducer\";\nimport { payslips_url } from \"../utils/constants\";\nimport { payslipitems_url } from \"../utils/constants\";\nimport { payrun_url } from \"../utils/constants\";\nimport { payslipearnings_url } from \"../utils/constants\";\nimport { payslipdeductions_url } from \"../utils/constants\";\nimport { SET_EDITPAYSLIPID, SET_PAYSLIPS_DATA, RESET_PAYSLIPS_DATA, UPDATE_PAYSLIPS_DATA, SET_ISPAYSLIPEDITING_ON, SET_ISPAYSLIPEDITING_OFF, SET_PAYSLIP_PERIOD, SET_PAYSLIP_ENDMONTHDATE, SET_SINGLEPAYSLIP, SET_PAYSLIPEARNING_AMOUNT, SET_PAYSLIPDEDUCTION_AMOUNT, GET_PAYSLIPS_BEGIN, GET_PAYSLIPS_SUCCESS, GET_PAYSLIPS_ERROR, GET_PAYSLIPITEMS_BEGIN, GET_PAYSLIPITEMS_SUCCESS, GET_PAYSLIPITEMS_ERROR, ADD_PAYSLIPITEM_BEGIN, ADD_PAYSLIPITEM_SUCCESS, ADD_PAYSLIPITEM_ERROR, DELETE_PAYSLIPITEM_BEGIN, DELETE_PAYSLIPITEM_SUCCESS, DELETE_PAYSLIPITEM_ERROR, UPDATE_PAYSLIPITEM_BEGIN, UPDATE_PAYSLIPITEM_SUCCESS, UPDATE_PAYSLIPITEM_ERROR, GET_PAYRUN_BEGIN, GET_PAYRUN_SUCCESS, GET_PAYRUN_ERROR, ADD_PAYRUN_BEGIN, ADD_PAYRUN_SUCCESS, ADD_PAYRUN_ERROR, UPDATE_PAYRUN_BEGIN, UPDATE_PAYRUN_SUCCESS, UPDATE_PAYRUN_ERROR, DELETE_PAYRUN_BEGIN, DELETE_PAYRUN_SUCCESS, DELETE_PAYRUN_ERROR, GET_SINGLE_PAYSLIP_BEGIN, GET_SINGLE_PAYSLIP_SUCCESS, GET_SINGLE_PAYSLIP_ERROR, GET_SINGLEBATCH_PAYSLIP_BEGIN, GET_SINGLEBATCH_PAYSLIP_SUCCESS, GET_SINGLEBATCH_PAYSLIP_ERROR, ADD_PAYSLIP_BEGIN, ADD_PAYSLIP_SUCCESS, ADD_PAYSLIP_ERROR, DELETE_PAYSLIP_BEGIN, DELETE_PAYSLIP_SUCCESS, DELETE_PAYSLIP_ERROR, UPDATE_PAYSLIP_BEGIN, UPDATE_PAYSLIP_SUCCESS, UPDATE_PAYSLIP_ERROR, RESET_SINGLE_PAYSLIP, GET_PAYSLIPEARNINGS_BEGIN, GET_PAYSLIPEARNINGS_SUCCESS, GET_PAYSLIPEARNINGS_ERROR, GET_SINGLE_PAYSLIPEARNING_BEGIN, GET_SINGLE_PAYSLIPEARNING_SUCCESS, GET_SINGLE_PAYSLIPEARNING_ERROR, ADD_PAYSLIPEARNING_BEGIN, ADD_PAYSLIPEARNING_SUCCESS, ADD_PAYSLIPEARNING_ERROR, DELETE_PAYSLIPEARNING_BEGIN, DELETE_PAYSLIPEARNING_SUCCESS, DELETE_PAYSLIPEARNING_ERROR, UPDATE_PAYSLIPEARNING_BEGIN, UPDATE_PAYSLIPEARNING_SUCCESS, UPDATE_PAYSLIPEARNING_ERROR, GET_PAYSLIPDEDUCTIONS_BEGIN, GET_PAYSLIPDEDUCTIONS_SUCCESS, GET_PAYSLIPDEDUCTIONS_ERROR, GET_SINGLE_PAYSLIPDEDUCTION_BEGIN, GET_SINGLE_PAYSLIPDEDUCTION_SUCCESS, GET_SINGLE_PAYSLIPDEDUCTION_ERROR, ADD_PAYSLIPDEDUCTION_BEGIN, ADD_PAYSLIPDEDUCTION_SUCCESS, ADD_PAYSLIPDEDUCTION_ERROR, DELETE_PAYSLIPDEDUCTION_BEGIN, DELETE_PAYSLIPDEDUCTION_SUCCESS, DELETE_PAYSLIPDEDUCTION_ERROR, UPDATE_PAYSLIPDEDUCTION_BEGIN, UPDATE_PAYSLIPDEDUCTION_SUCCESS, UPDATE_PAYSLIPDEDUCTION_ERROR } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isPayslipEditing: false,\n  alertPayslip: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editPayslipID: null,\n  payslips_loading: false,\n  payslips_error: false,\n  payslip_period: \"\",\n  payslip_endmonthdate: \"\",\n  payslip_earning_amount: 0,\n  payslip_deduction_amount: 0,\n  payslips: [],\n  payslipsdata: [],\n  single_payslip_loading: false,\n  single_payslip_error: false,\n  single_payslip: {},\n  singlebatch_payslip_loading: false,\n  singlebatch_payslip_error: false,\n  singlebatch_payslip: {},\n  delete_payslip_loading: false,\n  delete_payslip_error: false,\n  update_payslip_loading: false,\n  update_payslip_error: false,\n  add_payslip_loading: false,\n  add_payslip_error: false,\n  // filterValue: \"Female\",\n  // filterfield: \"gender\",\n  // payslip earnings\n  isPayslipEarningEditing: false,\n  alertPayslipEarning: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editPayslipEarningID: null,\n  payslipearnings_loading: false,\n  payslipearnings_error: false,\n  payslipearnings: [],\n  single_payslipearning_loading: false,\n  single_payslipearning_error: false,\n  single_payslipearning: {},\n  delete_payslipearning_loading: false,\n  delete_payslipearning_error: false,\n  update_payslipearning_loading: false,\n  update_payslipearning_error: false,\n  add_payslipearning_loading: false,\n  add_payslipearning_error: false,\n  // payslip deductions\n  isPayslipDeductionEditing: false,\n  alertPayslipDeduction: {\n    show: false,\n    msg: \"\",\n    type: \"\"\n  },\n  editPayslipDeductionID: null,\n  payslipdeductions_loading: false,\n  payslipdeductions_error: false,\n  payslipdeductions: [],\n  single_payslipdeduction_loading: false,\n  single_payslipdeduction_error: false,\n  single_payslipdeduction: {},\n  delete_payslipdeduction_loading: false,\n  delete_payslipdeduction_error: false,\n  update_payslipdeduction_loading: false,\n  update_payslipdeduction_error: false,\n  add_payslipdeduction_loading: false,\n  add_payslipdeduction_error: false,\n  payslipitems_loading: false,\n  payslipitems_error: false,\n  payslipitems: [],\n  delete_payslipitem_loading: false,\n  delete_payslipitem_error: false,\n  update_payslipitem_loading: false,\n  update_payslipitem_error: false,\n  add_payslipitem_loading: false,\n  add_payslipitem_error: false,\n  single_payslipitem: {},\n  payrun_loading: false,\n  payrun_error: false,\n  payrun: [],\n  delete_payrun_loading: false,\n  delete_payrun_error: false,\n  update_payrun_loading: false,\n  update_payrun_error: false,\n  add_payrun_loading: false,\n  add_payrun_error: false,\n  single_payrun: {}\n};\nconst PayslipsContext = /*#__PURE__*/React.createContext();\nexport const PayslipsProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState); //....... payslip\n\n  const loadPayslips = async () => {\n    dispatch({\n      type: GET_PAYSLIPS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(payslips_url); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const payslips = await res.json();\n      dispatch({\n        type: GET_PAYSLIPS_SUCCESS,\n        payload: payslips\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPS_ERROR\n      });\n    }\n  };\n\n  const loadPendingPayslips = async fi => {\n    dispatch({\n      type: GET_PAYSLIPS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslips_url}?fi=${fi}`); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const payslips = await res.json();\n      dispatch({\n        type: GET_PAYSLIPS_SUCCESS,\n        payload: payslips\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPS_ERROR\n      });\n    }\n  };\n\n  const getSingleBatchPayslip = async period => {\n    dispatch({\n      type: GET_SINGLEBATCH_PAYSLIP_BEGIN\n    });\n\n    try {\n      const res = await fetch(`${payslips_url}?fv=${period}`);\n      const singlebatchpayslip = await res.json();\n      dispatch({\n        type: GET_SINGLEBATCH_PAYSLIP_SUCCESS,\n        payload: singlebatchpayslip\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLEBATCH_PAYSLIP_ERROR\n      });\n    }\n  };\n\n  const setIsPayslipEditingOn = () => {\n    dispatch({\n      type: SET_ISPAYSLIPEDITING_ON\n    });\n  };\n\n  const setIsPayslipEditingOff = () => {\n    dispatch({\n      type: SET_ISPAYSLIPEDITING_OFF\n    });\n  };\n\n  const setPayslipsData = value => {\n    dispatch({\n      type: SET_PAYSLIPS_DATA,\n      payload: value\n    });\n  };\n\n  const resetPayslipsData = () => {\n    dispatch({\n      type: RESET_PAYSLIPS_DATA\n    });\n  };\n\n  const updatePayslipsData = (name, value) => {\n    dispatch({\n      type: UPDATE_PAYSLIPS_DATA,\n      payload\n    });\n  };\n\n  const resetSinglePayslip = () => {\n    dispatch({\n      type: RESET_SINGLE_PAYSLIP\n    });\n  };\n\n  const setPayslipEarningAmount = value => {\n    dispatch({\n      type: SET_PAYSLIPEARNING_AMOUNT,\n      payload: value\n    });\n  };\n\n  const setPayslipDeductionAmount = value => {\n    dispatch({\n      type: SET_PAYSLIPDEDUCTION_AMOUNT,\n      payload: value\n    });\n  };\n\n  const setPayslipPeriod = async name => {\n    try {\n      dispatch({\n        type: SET_PAYSLIP_PERIOD,\n        payload: name\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n\n  const setPayslipEndMonthDate = async name => {\n    try {\n      dispatch({\n        type: SET_PAYSLIP_ENDMONTHDATE,\n        payload: name\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n\n  const setEditPayslipID = async id => {\n    try {\n      dispatch({\n        type: SET_EDITPAYSLIPID,\n        payload: id\n      });\n    } catch (error) {\n      dispatch(error);\n    }\n  };\n\n  const getSinglePayslip = async id => {\n    dispatch({\n      type: GET_SINGLE_PAYSLIP_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${payslips_url}?id=${id}`);\n      const singlepayslip = data;\n      dispatch({\n        type: GET_SINGLE_PAYSLIP_SUCCESS,\n        payload: singlepayslip\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_SINGLE_PAYSLIP_ERROR\n      });\n    }\n  };\n\n  const addPayslip = async data => {\n    const {\n      id,\n      name,\n      from_date,\n      to_date,\n      reason,\n      no_of_days,\n      status\n    } = data; //\n\n    dispatch({\n      type: ADD_PAYSLIP_BEGIN\n    });\n\n    try {\n      await fetch(payslips_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIP_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIP_ERROR\n      });\n    }\n  };\n\n  const updatePayslip = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIP_BEGIN\n    });\n\n    try {\n      await fetch(payslips_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIP_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIP_ERROR\n      });\n    }\n  };\n\n  const deletePayslip = async id => {\n    dispatch({\n      type: DELETE_PAYSLIP_BEGIN\n    });\n\n    try {\n      await fetch(payslips_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIP_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIP_ERROR\n      });\n    }\n  }; //.... payslip items\n\n\n  const getPayslipitems = async fv => {\n    dispatch({\n      type: GET_PAYSLIPITEMS_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${payslipitems_url}?period=${fv}`);\n      const payslipitems = data;\n      dispatch({\n        type: GET_PAYSLIPITEMS_SUCCESS,\n        payload: payslipitems\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPITEMS_ERROR\n      });\n    }\n  };\n\n  const addPayslipitem = async data => {\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\n    //\n    dispatch({\n      type: ADD_PAYSLIPITEM_BEGIN\n    });\n\n    try {\n      await fetch(payslipitems_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIPITEM_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIPITEM_ERROR\n      });\n    }\n  };\n\n  const updatePayslipitem = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIPITEM_BEGIN\n    });\n\n    try {\n      await fetch(payslipitems_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIPITEM_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIPITEM_ERROR\n      });\n    }\n  };\n\n  const deletePayslipitem = async id => {\n    dispatch({\n      type: DELETE_PAYSLIPITEM_BEGIN\n    });\n\n    try {\n      await fetch(payslipitems_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIPITEM_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIPITEM_ERROR\n      });\n    }\n  }; //.... payrun\n\n\n  const getPayrun = async () => {\n    dispatch({\n      type: GET_PAYRUN_BEGIN\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get(`${payrun_url}`);\n      const payrun = data;\n      dispatch({\n        type: GET_PAYRUN_SUCCESS,\n        payload: payrun\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYRUN_ERROR\n      });\n    }\n  };\n\n  const addPayrun = async data => {\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\n    //\n    dispatch({\n      type: ADD_PAYRUN_BEGIN\n    });\n\n    try {\n      await fetch(payrun_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYRUN_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYRUN_ERROR\n      });\n    }\n  };\n\n  const updatePayrun = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYRUN_BEGIN\n    });\n\n    try {\n      await fetch(payrun_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYRUN_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYRUN_ERROR\n      });\n    }\n  };\n\n  const deletePayrun = async id => {\n    dispatch({\n      type: DELETE_PAYRUN_BEGIN\n    });\n\n    try {\n      await fetch(payrun_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYRUN_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYRUN_ERROR\n      });\n    }\n  }; //.... payslip earnings\n\n\n  const loadPayslipEarnings = async () => {\n    dispatch({\n      type: GET_PAYSLIPEARNINGS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(payslipearnings_url); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const payslipearnings = await res.json();\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_SUCCESS,\n        payload: payslipearnings\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_ERROR\n      });\n    }\n  }; //.... payslip earnings\n\n\n  const getSingleBatchPayslipEarnings = async (empid, period) => {\n    dispatch({\n      type: GET_PAYSLIPEARNINGS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslipearnings_url}?fv=${empid}&period=${period}`); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const payslipearnings = await res.json();\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_SUCCESS,\n        payload: payslipearnings\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPEARNINGS_ERROR\n      });\n    }\n  };\n\n  const addPayslipEarning = async data => {\n    const {\n      id,\n      name,\n      period,\n      description,\n      amount\n    } = data; //\n\n    dispatch({\n      type: ADD_PAYSLIPEARNING_BEGIN\n    });\n\n    try {\n      await fetch(payslipearnings_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIPEARNING_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIPEARNING_ERROR\n      });\n    }\n  };\n\n  const updatePayslipEarning = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIPEARNING_BEGIN\n    });\n\n    try {\n      await fetch(payslipearnings_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIPEARNING_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIPEARNING_ERROR\n      });\n    }\n  };\n\n  const deletePayslipEarning = async id => {\n    dispatch({\n      type: DELETE_PAYSLIPEARNING_BEGIN\n    });\n\n    try {\n      await fetch(payslipearnings_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIPEARNING_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIPEARNING_ERROR\n      });\n    }\n  }; //.... payslip deductions\n\n\n  const loadPayslipDeductions = async () => {\n    dispatch({\n      type: GET_PAYSLIPDEDUCTIONS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(payslipdeductions_url); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const payslipdeductions = await res.json();\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\n        payload: payslipdeductions\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_ERROR\n      });\n    }\n  };\n\n  const getSingleBatchPayslipDeductions = async (empid, period) => {\n    dispatch({\n      type: GET_PAYSLIPDEDUCTIONS_BEGIN\n    });\n\n    try {\n      // const res = await fetch(\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\n      // );\n      const res = await fetch(`${payslipdeductions_url}?fv=${empid}&period=${period}`); //const { data } = await axios.get(employees_url);\n      //const employees = data;\n\n      const payslipdeductions = await res.json();\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\n        payload: payslipdeductions\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PAYSLIPDEDUCTIONS_ERROR\n      });\n    }\n  };\n\n  const addPayslipDeduction = async data => {\n    const {\n      id,\n      name,\n      period,\n      description,\n      amount\n    } = data; //\n\n    dispatch({\n      type: ADD_PAYSLIPDEDUCTION_BEGIN\n    });\n\n    try {\n      await fetch(payslipdeductions_url, {\n        method: \"POST\",\n        body: JSON.stringify({ ...data\n        })\n      });\n      dispatch({\n        type: ADD_PAYSLIPDEDUCTION_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_PAYSLIPDEDUCTION_ERROR\n      });\n    }\n  };\n\n  const updatePayslipDeduction = async data => {\n    const {\n      id,\n      ...fields\n    } = data;\n    dispatch({\n      type: UPDATE_PAYSLIPDEDUCTION_BEGIN\n    });\n\n    try {\n      await fetch(payslipdeductions_url, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          ...fields\n        })\n      });\n      dispatch({\n        type: UPDATE_PAYSLIPDEDUCTION_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_PAYSLIPDEDUCTION_ERROR\n      });\n    }\n  };\n\n  const deletePayslipDeduction = async id => {\n    dispatch({\n      type: DELETE_PAYSLIPDEDUCTION_BEGIN\n    });\n\n    try {\n      await fetch(payslipdeductions_url, {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      dispatch({\n        type: DELETE_PAYSLIPDEDUCTION_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_PAYSLIPDEDUCTION_ERROR\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PayslipsContext.Provider, {\n    value: { ...state,\n      loadPayslips,\n      loadPendingPayslips,\n      addPayslip,\n      updatePayslip,\n      deletePayslip,\n      getSinglePayslip,\n      getSingleBatchPayslip,\n      setEditPayslipID,\n      setIsPayslipEditingOn,\n      setIsPayslipEditingOff,\n      setPayslipsData,\n      resetPayslipsData,\n      loadPayslipEarnings,\n      addPayslipEarning,\n      updatePayslipEarning,\n      deletePayslipEarning,\n      getSingleBatchPayslipEarnings,\n      setPayslipEarningAmount,\n      loadPayslipDeductions,\n      addPayslipDeduction,\n      updatePayslipDeduction,\n      deletePayslipDeduction,\n      getSingleBatchPayslipDeductions,\n      setPayslipDeductionAmount,\n      resetSinglePayslip,\n      setPayslipPeriod,\n      setPayslipEndMonthDate,\n      getPayslipitems,\n      deletePayslipitem,\n      updatePayslipitem,\n      addPayslipitem,\n      getPayrun,\n      deletePayrun,\n      updatePayrun,\n      addPayrun\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 609,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PayslipsProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = PayslipsProvider;\nexport const usePayslipsContext = () => {\n  _s2();\n\n  return useContext(PayslipsContext);\n};\n\n_s2(usePayslipsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PayslipsProvider\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/context/payslips_context.js"],"names":["React","useContext","useEffect","useReducer","axios","reducer","payslips_url","payslipitems_url","payrun_url","payslipearnings_url","payslipdeductions_url","SET_EDITPAYSLIPID","SET_PAYSLIPS_DATA","RESET_PAYSLIPS_DATA","UPDATE_PAYSLIPS_DATA","SET_ISPAYSLIPEDITING_ON","SET_ISPAYSLIPEDITING_OFF","SET_PAYSLIP_PERIOD","SET_PAYSLIP_ENDMONTHDATE","SET_SINGLEPAYSLIP","SET_PAYSLIPEARNING_AMOUNT","SET_PAYSLIPDEDUCTION_AMOUNT","GET_PAYSLIPS_BEGIN","GET_PAYSLIPS_SUCCESS","GET_PAYSLIPS_ERROR","GET_PAYSLIPITEMS_BEGIN","GET_PAYSLIPITEMS_SUCCESS","GET_PAYSLIPITEMS_ERROR","ADD_PAYSLIPITEM_BEGIN","ADD_PAYSLIPITEM_SUCCESS","ADD_PAYSLIPITEM_ERROR","DELETE_PAYSLIPITEM_BEGIN","DELETE_PAYSLIPITEM_SUCCESS","DELETE_PAYSLIPITEM_ERROR","UPDATE_PAYSLIPITEM_BEGIN","UPDATE_PAYSLIPITEM_SUCCESS","UPDATE_PAYSLIPITEM_ERROR","GET_PAYRUN_BEGIN","GET_PAYRUN_SUCCESS","GET_PAYRUN_ERROR","ADD_PAYRUN_BEGIN","ADD_PAYRUN_SUCCESS","ADD_PAYRUN_ERROR","UPDATE_PAYRUN_BEGIN","UPDATE_PAYRUN_SUCCESS","UPDATE_PAYRUN_ERROR","DELETE_PAYRUN_BEGIN","DELETE_PAYRUN_SUCCESS","DELETE_PAYRUN_ERROR","GET_SINGLE_PAYSLIP_BEGIN","GET_SINGLE_PAYSLIP_SUCCESS","GET_SINGLE_PAYSLIP_ERROR","GET_SINGLEBATCH_PAYSLIP_BEGIN","GET_SINGLEBATCH_PAYSLIP_SUCCESS","GET_SINGLEBATCH_PAYSLIP_ERROR","ADD_PAYSLIP_BEGIN","ADD_PAYSLIP_SUCCESS","ADD_PAYSLIP_ERROR","DELETE_PAYSLIP_BEGIN","DELETE_PAYSLIP_SUCCESS","DELETE_PAYSLIP_ERROR","UPDATE_PAYSLIP_BEGIN","UPDATE_PAYSLIP_SUCCESS","UPDATE_PAYSLIP_ERROR","RESET_SINGLE_PAYSLIP","GET_PAYSLIPEARNINGS_BEGIN","GET_PAYSLIPEARNINGS_SUCCESS","GET_PAYSLIPEARNINGS_ERROR","GET_SINGLE_PAYSLIPEARNING_BEGIN","GET_SINGLE_PAYSLIPEARNING_SUCCESS","GET_SINGLE_PAYSLIPEARNING_ERROR","ADD_PAYSLIPEARNING_BEGIN","ADD_PAYSLIPEARNING_SUCCESS","ADD_PAYSLIPEARNING_ERROR","DELETE_PAYSLIPEARNING_BEGIN","DELETE_PAYSLIPEARNING_SUCCESS","DELETE_PAYSLIPEARNING_ERROR","UPDATE_PAYSLIPEARNING_BEGIN","UPDATE_PAYSLIPEARNING_SUCCESS","UPDATE_PAYSLIPEARNING_ERROR","GET_PAYSLIPDEDUCTIONS_BEGIN","GET_PAYSLIPDEDUCTIONS_SUCCESS","GET_PAYSLIPDEDUCTIONS_ERROR","GET_SINGLE_PAYSLIPDEDUCTION_BEGIN","GET_SINGLE_PAYSLIPDEDUCTION_SUCCESS","GET_SINGLE_PAYSLIPDEDUCTION_ERROR","ADD_PAYSLIPDEDUCTION_BEGIN","ADD_PAYSLIPDEDUCTION_SUCCESS","ADD_PAYSLIPDEDUCTION_ERROR","DELETE_PAYSLIPDEDUCTION_BEGIN","DELETE_PAYSLIPDEDUCTION_SUCCESS","DELETE_PAYSLIPDEDUCTION_ERROR","UPDATE_PAYSLIPDEDUCTION_BEGIN","UPDATE_PAYSLIPDEDUCTION_SUCCESS","UPDATE_PAYSLIPDEDUCTION_ERROR","initialState","isPayslipEditing","alertPayslip","show","msg","type","editPayslipID","payslips_loading","payslips_error","payslip_period","payslip_endmonthdate","payslip_earning_amount","payslip_deduction_amount","payslips","payslipsdata","single_payslip_loading","single_payslip_error","single_payslip","singlebatch_payslip_loading","singlebatch_payslip_error","singlebatch_payslip","delete_payslip_loading","delete_payslip_error","update_payslip_loading","update_payslip_error","add_payslip_loading","add_payslip_error","isPayslipEarningEditing","alertPayslipEarning","editPayslipEarningID","payslipearnings_loading","payslipearnings_error","payslipearnings","single_payslipearning_loading","single_payslipearning_error","single_payslipearning","delete_payslipearning_loading","delete_payslipearning_error","update_payslipearning_loading","update_payslipearning_error","add_payslipearning_loading","add_payslipearning_error","isPayslipDeductionEditing","alertPayslipDeduction","editPayslipDeductionID","payslipdeductions_loading","payslipdeductions_error","payslipdeductions","single_payslipdeduction_loading","single_payslipdeduction_error","single_payslipdeduction","delete_payslipdeduction_loading","delete_payslipdeduction_error","update_payslipdeduction_loading","update_payslipdeduction_error","add_payslipdeduction_loading","add_payslipdeduction_error","payslipitems_loading","payslipitems_error","payslipitems","delete_payslipitem_loading","delete_payslipitem_error","update_payslipitem_loading","update_payslipitem_error","add_payslipitem_loading","add_payslipitem_error","single_payslipitem","payrun_loading","payrun_error","payrun","delete_payrun_loading","delete_payrun_error","update_payrun_loading","update_payrun_error","add_payrun_loading","add_payrun_error","single_payrun","PayslipsContext","createContext","PayslipsProvider","children","state","dispatch","loadPayslips","res","fetch","json","payload","error","loadPendingPayslips","fi","getSingleBatchPayslip","period","singlebatchpayslip","setIsPayslipEditingOn","setIsPayslipEditingOff","setPayslipsData","value","resetPayslipsData","updatePayslipsData","name","resetSinglePayslip","setPayslipEarningAmount","setPayslipDeductionAmount","setPayslipPeriod","setPayslipEndMonthDate","setEditPayslipID","id","getSinglePayslip","data","get","singlepayslip","addPayslip","from_date","to_date","reason","no_of_days","status","method","body","JSON","stringify","err","updatePayslip","fields","deletePayslip","getPayslipitems","fv","addPayslipitem","updatePayslipitem","deletePayslipitem","getPayrun","addPayrun","updatePayrun","deletePayrun","loadPayslipEarnings","getSingleBatchPayslipEarnings","empid","addPayslipEarning","description","amount","updatePayslipEarning","deletePayslipEarning","loadPayslipDeductions","getSingleBatchPayslipDeductions","addPayslipDeduction","updatePayslipDeduction","deletePayslipDeduction","usePayslipsContext"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from \"../reducers/payslips_reducer\";\r\nimport { payslips_url } from \"../utils/constants\";\r\nimport { payslipitems_url } from \"../utils/constants\";\r\nimport { payrun_url } from \"../utils/constants\";\r\nimport { payslipearnings_url } from \"../utils/constants\";\r\nimport { payslipdeductions_url } from \"../utils/constants\";\r\n\r\nimport {\r\n  SET_EDITPAYSLIPID,\r\n  SET_PAYSLIPS_DATA,\r\n  RESET_PAYSLIPS_DATA,\r\n  UPDATE_PAYSLIPS_DATA,\r\n  SET_ISPAYSLIPEDITING_ON,\r\n  SET_ISPAYSLIPEDITING_OFF,\r\n  SET_PAYSLIP_PERIOD,\r\n  SET_PAYSLIP_ENDMONTHDATE,\r\n  SET_SINGLEPAYSLIP,\r\n  SET_PAYSLIPEARNING_AMOUNT,\r\n  SET_PAYSLIPDEDUCTION_AMOUNT,\r\n  GET_PAYSLIPS_BEGIN,\r\n  GET_PAYSLIPS_SUCCESS,\r\n  GET_PAYSLIPS_ERROR,\r\n  GET_PAYSLIPITEMS_BEGIN,\r\n  GET_PAYSLIPITEMS_SUCCESS,\r\n  GET_PAYSLIPITEMS_ERROR,\r\n  ADD_PAYSLIPITEM_BEGIN,\r\n  ADD_PAYSLIPITEM_SUCCESS,\r\n  ADD_PAYSLIPITEM_ERROR,\r\n  DELETE_PAYSLIPITEM_BEGIN,\r\n  DELETE_PAYSLIPITEM_SUCCESS,\r\n  DELETE_PAYSLIPITEM_ERROR,\r\n  UPDATE_PAYSLIPITEM_BEGIN,\r\n  UPDATE_PAYSLIPITEM_SUCCESS,\r\n  UPDATE_PAYSLIPITEM_ERROR,\r\n  GET_PAYRUN_BEGIN,\r\n  GET_PAYRUN_SUCCESS,\r\n  GET_PAYRUN_ERROR,\r\n  ADD_PAYRUN_BEGIN,\r\n  ADD_PAYRUN_SUCCESS,\r\n  ADD_PAYRUN_ERROR,\r\n  UPDATE_PAYRUN_BEGIN,\r\n  UPDATE_PAYRUN_SUCCESS,\r\n  UPDATE_PAYRUN_ERROR,\r\n  DELETE_PAYRUN_BEGIN,\r\n  DELETE_PAYRUN_SUCCESS,\r\n  DELETE_PAYRUN_ERROR,\r\n  GET_SINGLE_PAYSLIP_BEGIN,\r\n  GET_SINGLE_PAYSLIP_SUCCESS,\r\n  GET_SINGLE_PAYSLIP_ERROR,\r\n  GET_SINGLEBATCH_PAYSLIP_BEGIN,\r\n  GET_SINGLEBATCH_PAYSLIP_SUCCESS,\r\n  GET_SINGLEBATCH_PAYSLIP_ERROR,\r\n  ADD_PAYSLIP_BEGIN,\r\n  ADD_PAYSLIP_SUCCESS,\r\n  ADD_PAYSLIP_ERROR,\r\n  DELETE_PAYSLIP_BEGIN,\r\n  DELETE_PAYSLIP_SUCCESS,\r\n  DELETE_PAYSLIP_ERROR,\r\n  UPDATE_PAYSLIP_BEGIN,\r\n  UPDATE_PAYSLIP_SUCCESS,\r\n  UPDATE_PAYSLIP_ERROR,\r\n  RESET_SINGLE_PAYSLIP,\r\n  GET_PAYSLIPEARNINGS_BEGIN,\r\n  GET_PAYSLIPEARNINGS_SUCCESS,\r\n  GET_PAYSLIPEARNINGS_ERROR,\r\n  GET_SINGLE_PAYSLIPEARNING_BEGIN,\r\n  GET_SINGLE_PAYSLIPEARNING_SUCCESS,\r\n  GET_SINGLE_PAYSLIPEARNING_ERROR,\r\n  ADD_PAYSLIPEARNING_BEGIN,\r\n  ADD_PAYSLIPEARNING_SUCCESS,\r\n  ADD_PAYSLIPEARNING_ERROR,\r\n  DELETE_PAYSLIPEARNING_BEGIN,\r\n  DELETE_PAYSLIPEARNING_SUCCESS,\r\n  DELETE_PAYSLIPEARNING_ERROR,\r\n  UPDATE_PAYSLIPEARNING_BEGIN,\r\n  UPDATE_PAYSLIPEARNING_SUCCESS,\r\n  UPDATE_PAYSLIPEARNING_ERROR,\r\n  GET_PAYSLIPDEDUCTIONS_BEGIN,\r\n  GET_PAYSLIPDEDUCTIONS_SUCCESS,\r\n  GET_PAYSLIPDEDUCTIONS_ERROR,\r\n  GET_SINGLE_PAYSLIPDEDUCTION_BEGIN,\r\n  GET_SINGLE_PAYSLIPDEDUCTION_SUCCESS,\r\n  GET_SINGLE_PAYSLIPDEDUCTION_ERROR,\r\n  ADD_PAYSLIPDEDUCTION_BEGIN,\r\n  ADD_PAYSLIPDEDUCTION_SUCCESS,\r\n  ADD_PAYSLIPDEDUCTION_ERROR,\r\n  DELETE_PAYSLIPDEDUCTION_BEGIN,\r\n  DELETE_PAYSLIPDEDUCTION_SUCCESS,\r\n  DELETE_PAYSLIPDEDUCTION_ERROR,\r\n  UPDATE_PAYSLIPDEDUCTION_BEGIN,\r\n  UPDATE_PAYSLIPDEDUCTION_SUCCESS,\r\n  UPDATE_PAYSLIPDEDUCTION_ERROR,\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  isPayslipEditing: false,\r\n  alertPayslip: { show: false, msg: \"\", type: \"\" },\r\n  editPayslipID: null,\r\n  payslips_loading: false,\r\n  payslips_error: false,\r\n  payslip_period: \"\",\r\n  payslip_endmonthdate: \"\",\r\n  payslip_earning_amount: 0,\r\n  payslip_deduction_amount: 0,\r\n  payslips: [],\r\n  payslipsdata: [],\r\n  single_payslip_loading: false,\r\n  single_payslip_error: false,\r\n  single_payslip: {},\r\n  singlebatch_payslip_loading: false,\r\n  singlebatch_payslip_error: false,\r\n  singlebatch_payslip: {},\r\n  delete_payslip_loading: false,\r\n  delete_payslip_error: false,\r\n  update_payslip_loading: false,\r\n  update_payslip_error: false,\r\n  add_payslip_loading: false,\r\n  add_payslip_error: false,\r\n  // filterValue: \"Female\",\r\n  // filterfield: \"gender\",\r\n  // payslip earnings\r\n  isPayslipEarningEditing: false,\r\n  alertPayslipEarning: { show: false, msg: \"\", type: \"\" },\r\n  editPayslipEarningID: null,\r\n  payslipearnings_loading: false,\r\n  payslipearnings_error: false,\r\n  payslipearnings: [],\r\n\r\n  single_payslipearning_loading: false,\r\n  single_payslipearning_error: false,\r\n  single_payslipearning: {},\r\n  delete_payslipearning_loading: false,\r\n  delete_payslipearning_error: false,\r\n  update_payslipearning_loading: false,\r\n  update_payslipearning_error: false,\r\n  add_payslipearning_loading: false,\r\n  add_payslipearning_error: false,\r\n  // payslip deductions\r\n  isPayslipDeductionEditing: false,\r\n  alertPayslipDeduction: { show: false, msg: \"\", type: \"\" },\r\n  editPayslipDeductionID: null,\r\n  payslipdeductions_loading: false,\r\n  payslipdeductions_error: false,\r\n  payslipdeductions: [],\r\n  single_payslipdeduction_loading: false,\r\n  single_payslipdeduction_error: false,\r\n  single_payslipdeduction: {},\r\n  delete_payslipdeduction_loading: false,\r\n  delete_payslipdeduction_error: false,\r\n  update_payslipdeduction_loading: false,\r\n  update_payslipdeduction_error: false,\r\n  add_payslipdeduction_loading: false,\r\n  add_payslipdeduction_error: false,\r\n  payslipitems_loading: false,\r\n  payslipitems_error: false,\r\n  payslipitems: [],\r\n  delete_payslipitem_loading: false,\r\n  delete_payslipitem_error: false,\r\n  update_payslipitem_loading: false,\r\n  update_payslipitem_error: false,\r\n  add_payslipitem_loading: false,\r\n  add_payslipitem_error: false,\r\n  single_payslipitem: {},\r\n  payrun_loading: false,\r\n  payrun_error: false,\r\n  payrun: [],\r\n  delete_payrun_loading: false,\r\n  delete_payrun_error: false,\r\n  update_payrun_loading: false,\r\n  update_payrun_error: false,\r\n  add_payrun_loading: false,\r\n  add_payrun_error: false,\r\n  single_payrun: {},\r\n};\r\n\r\nconst PayslipsContext = React.createContext();\r\n\r\nexport const PayslipsProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //....... payslip\r\n  const loadPayslips = async () => {\r\n    dispatch({ type: GET_PAYSLIPS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(payslips_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslips = await res.json();\r\n      dispatch({ type: GET_PAYSLIPS_SUCCESS, payload: payslips });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPS_ERROR });\r\n    }\r\n  };\r\n\r\n  const loadPendingPayslips = async (fi) => {\r\n    dispatch({ type: GET_PAYSLIPS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(`${payslips_url}?fi=${fi}`);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslips = await res.json();\r\n      dispatch({ type: GET_PAYSLIPS_SUCCESS, payload: payslips });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPS_ERROR });\r\n    }\r\n  };\r\n\r\n  const getSingleBatchPayslip = async (period) => {\r\n    dispatch({ type: GET_SINGLEBATCH_PAYSLIP_BEGIN });\r\n    try {\r\n      const res = await fetch(`${payslips_url}?fv=${period}`);\r\n      const singlebatchpayslip = await res.json();\r\n\r\n      dispatch({\r\n        type: GET_SINGLEBATCH_PAYSLIP_SUCCESS,\r\n        payload: singlebatchpayslip,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLEBATCH_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const setIsPayslipEditingOn = () => {\r\n    dispatch({ type: SET_ISPAYSLIPEDITING_ON });\r\n  };\r\n\r\n  const setIsPayslipEditingOff = () => {\r\n    dispatch({ type: SET_ISPAYSLIPEDITING_OFF });\r\n  };\r\n\r\n  const setPayslipsData = (value) => {\r\n    dispatch({ type: SET_PAYSLIPS_DATA, payload: value });\r\n  };\r\n\r\n  const resetPayslipsData = () => {\r\n    dispatch({ type: RESET_PAYSLIPS_DATA });\r\n  };\r\n\r\n   const updatePayslipsData = (name,value) => {\r\n     dispatch({ type: UPDATE_PAYSLIPS_DATA, payload });\r\n   };\r\n\r\n  const resetSinglePayslip = () => {\r\n    dispatch({ type: RESET_SINGLE_PAYSLIP });\r\n  };\r\n\r\n  const setPayslipEarningAmount = (value) => {\r\n    dispatch({ type: SET_PAYSLIPEARNING_AMOUNT, payload: value });\r\n  };\r\n  const setPayslipDeductionAmount = (value) => {\r\n    dispatch({ type: SET_PAYSLIPDEDUCTION_AMOUNT, payload: value });\r\n  };\r\n\r\n  const setPayslipPeriod = async (name) => {\r\n    try {\r\n      dispatch({ type: SET_PAYSLIP_PERIOD, payload: name });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n  const setPayslipEndMonthDate = async (name) => {\r\n    try {\r\n      dispatch({ type: SET_PAYSLIP_ENDMONTHDATE, payload: name });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n\r\n  const setEditPayslipID = async (id) => {\r\n    try {\r\n      dispatch({ type: SET_EDITPAYSLIPID, payload: id });\r\n    } catch (error) {\r\n      dispatch(error);\r\n    }\r\n  };\r\n\r\n  const getSinglePayslip = async (id) => {\r\n    dispatch({ type: GET_SINGLE_PAYSLIP_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payslips_url}?id=${id}`);\r\n      const singlepayslip = data;\r\n      dispatch({ type: GET_SINGLE_PAYSLIP_SUCCESS, payload: singlepayslip });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SINGLE_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const addPayslip = async (data) => {\r\n    const { id, name, from_date, to_date, reason, no_of_days, status } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIP_BEGIN });\r\n    try {\r\n      await fetch(payslips_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIP_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslip = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIP_BEGIN });\r\n    try {\r\n      await fetch(payslips_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIP_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslip = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIP_BEGIN });\r\n    try {\r\n      await fetch(payslips_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIP_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIP_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payslip items\r\n  const getPayslipitems = async (fv) => {\r\n    dispatch({ type: GET_PAYSLIPITEMS_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payslipitems_url}?period=${fv}`);\r\n      const payslipitems = data;\r\n      dispatch({ type: GET_PAYSLIPITEMS_SUCCESS, payload: payslipitems });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPITEMS_ERROR });\r\n    }\r\n  };\r\n\r\n  const addPayslipitem = async (data) => {\r\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIPITEM_BEGIN });\r\n    try {\r\n      await fetch(payslipitems_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIPITEM_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIPITEM_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslipitem = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIPITEM_BEGIN });\r\n    try {\r\n      await fetch(payslipitems_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIPITEM_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIPITEM_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslipitem = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIPITEM_BEGIN });\r\n    try {\r\n      await fetch(payslipitems_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIPITEM_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIPITEM_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payrun\r\n  const getPayrun = async () => {\r\n    dispatch({ type: GET_PAYRUN_BEGIN });\r\n    try {\r\n      const { data } = await axios.get(`${payrun_url}`);\r\n      const payrun = data;\r\n      dispatch({ type: GET_PAYRUN_SUCCESS, payload: payrun });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  const addPayrun = async (data) => {\r\n    //const { id, name, empid, period, payitem, paytype, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYRUN_BEGIN });\r\n    try {\r\n      await fetch(payrun_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYRUN_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayrun = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYRUN_BEGIN });\r\n    try {\r\n      await fetch(payrun_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYRUN_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayrun = async (id) => {\r\n    dispatch({ type: DELETE_PAYRUN_BEGIN });\r\n    try {\r\n      await fetch(payrun_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYRUN_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYRUN_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payslip earnings\r\n  const loadPayslipEarnings = async () => {\r\n    dispatch({ type: GET_PAYSLIPEARNINGS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(payslipearnings_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipearnings = await res.json();\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_SUCCESS, payload: payslipearnings });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_ERROR });\r\n    }\r\n  };\r\n  //.... payslip earnings\r\n  const getSingleBatchPayslipEarnings = async (empid, period) => {\r\n    dispatch({ type: GET_PAYSLIPEARNINGS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(\r\n        `${payslipearnings_url}?fv=${empid}&period=${period}`\r\n      );\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipearnings = await res.json();\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_SUCCESS, payload: payslipearnings });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPEARNINGS_ERROR });\r\n    }\r\n  };\r\n  const addPayslipEarning = async (data) => {\r\n    const { id, name, period, description, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIPEARNING_BEGIN });\r\n    try {\r\n      await fetch(payslipearnings_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIPEARNING_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIPEARNING_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslipEarning = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIPEARNING_BEGIN });\r\n    try {\r\n      await fetch(payslipearnings_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIPEARNING_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIPEARNING_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslipEarning = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIPEARNING_BEGIN });\r\n    try {\r\n      await fetch(payslipearnings_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIPEARNING_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIPEARNING_ERROR });\r\n    }\r\n  };\r\n\r\n  //.... payslip deductions\r\n  const loadPayslipDeductions = async () => {\r\n    dispatch({ type: GET_PAYSLIPDEDUCTIONS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(payslipdeductions_url);\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipdeductions = await res.json();\r\n      dispatch({\r\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\r\n        payload: payslipdeductions,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPDEDUCTIONS_ERROR });\r\n    }\r\n  };\r\n  const getSingleBatchPayslipDeductions = async (empid, period) => {\r\n    dispatch({ type: GET_PAYSLIPDEDUCTIONS_BEGIN });\r\n    try {\r\n      // const res = await fetch(\r\n      //   `${employees_url}?filterValue=\"${state.filterValue}\"&filterField=\"${state.filterField}\"`\r\n      // );\r\n      const res = await fetch(\r\n        `${payslipdeductions_url}?fv=${empid}&period=${period}`\r\n      );\r\n      //const { data } = await axios.get(employees_url);\r\n      //const employees = data;\r\n      const payslipdeductions = await res.json();\r\n      dispatch({\r\n        type: GET_PAYSLIPDEDUCTIONS_SUCCESS,\r\n        payload: payslipdeductions,\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: GET_PAYSLIPDEDUCTIONS_ERROR });\r\n    }\r\n  };\r\n  const addPayslipDeduction = async (data) => {\r\n    const { id, name, period, description, amount } = data;\r\n    //\r\n    dispatch({ type: ADD_PAYSLIPDEDUCTION_BEGIN });\r\n    try {\r\n      await fetch(payslipdeductions_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n      dispatch({ type: ADD_PAYSLIPDEDUCTION_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: ADD_PAYSLIPDEDUCTION_ERROR });\r\n    }\r\n  };\r\n\r\n  const updatePayslipDeduction = async (data) => {\r\n    const { id, ...fields } = data;\r\n\r\n    dispatch({ type: UPDATE_PAYSLIPDEDUCTION_BEGIN });\r\n    try {\r\n      await fetch(payslipdeductions_url, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ id, ...fields }),\r\n      });\r\n      dispatch({ type: UPDATE_PAYSLIPDEDUCTION_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: UPDATE_PAYSLIPDEDUCTION_ERROR });\r\n    }\r\n  };\r\n\r\n  const deletePayslipDeduction = async (id) => {\r\n    dispatch({ type: DELETE_PAYSLIPDEDUCTION_BEGIN });\r\n    try {\r\n      await fetch(payslipdeductions_url, {\r\n        method: \"DELETE\",\r\n        body: JSON.stringify({ id: id }),\r\n      });\r\n      dispatch({ type: DELETE_PAYSLIPDEDUCTION_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_PAYSLIPDEDUCTION_ERROR });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PayslipsContext.Provider\r\n      value={{\r\n        ...state,\r\n        loadPayslips,\r\n        loadPendingPayslips,\r\n        addPayslip,\r\n        updatePayslip,\r\n        deletePayslip,\r\n        getSinglePayslip,\r\n        getSingleBatchPayslip,\r\n        setEditPayslipID,\r\n        setIsPayslipEditingOn,\r\n        setIsPayslipEditingOff,\r\n        setPayslipsData,\r\n        resetPayslipsData,\r\n        loadPayslipEarnings,\r\n        addPayslipEarning,\r\n        updatePayslipEarning,\r\n        deletePayslipEarning,\r\n        getSingleBatchPayslipEarnings,\r\n        setPayslipEarningAmount,\r\n        loadPayslipDeductions,\r\n        addPayslipDeduction,\r\n        updatePayslipDeduction,\r\n        deletePayslipDeduction,\r\n        getSingleBatchPayslipDeductions,\r\n        setPayslipDeductionAmount,\r\n        resetSinglePayslip,\r\n        setPayslipPeriod,\r\n        setPayslipEndMonthDate,\r\n        getPayslipitems,\r\n        deletePayslipitem,\r\n        updatePayslipitem,\r\n        addPayslipitem,\r\n        getPayrun,\r\n        deletePayrun,\r\n        updatePayrun,\r\n        addPayrun,\r\n      }}\r\n    >\r\n      {children}\r\n    </PayslipsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePayslipsContext = () => {\r\n  return useContext(PayslipsContext);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}