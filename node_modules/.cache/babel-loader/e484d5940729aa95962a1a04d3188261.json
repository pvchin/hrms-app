{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\PayslipTableAdmin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { payPeriodState, payPeriodEndMonthState, payPeriodEmpIdState } from \"./data/atomdata\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\"\n}, {\n  title: \"Period\",\n  field: \"period\",\n  editable: \"never\"\n}, {\n  title: \"Date\",\n  field: \"date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"Basic Pay\",\n  field: \"basic_pay\",\n  type: \"currency\",\n  editable: \"never\"\n}, {\n  title: \"TAP Amount\",\n  field: \"tap_amount\",\n  type: \"currency\",\n  editable: \"never\"\n}, {\n  title: \"SCP Amount\",\n  field: \"scp_amount\",\n  type: \"currency\",\n  editable: \"never\"\n}, {\n  title: \"Earnings\",\n  field: \"total_earnings\",\n  type: \"currency\",\n  editable: \"never\"\n}, {\n  title: \"Deductions\",\n  field: \"total_deductions\",\n  type: \"currency\",\n  editable: \"never\"\n}, {\n  title: \"Nett Pay\",\n  field: \"nett_pay\",\n  type: \"currency\",\n  editable: \"never\"\n}, // { title: \"Bank Name\", field: \"bank_name\" },\n// { title: \"Bank AC No\", field: \"bank_accno\" },\n{\n  title: \"Status\",\n  field: \"status\",\n  cellStyle: {\n    width: 50,\n    maxWidth: 50\n  },\n  editComponent: props => /*#__PURE__*/_jsxDEV(TextField //defaultValue={props.value || null}\n  , {\n    onChange: e => props.onChange(e.target.value),\n    style: {\n      width: 100\n    },\n    value: props.value,\n    select: true,\n    children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Pending\",\n      children: \"Pending\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Approve\",\n      children: \"Approve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Reject\",\n      children: \"Reject\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: \"Cancel\",\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this)\n}];\nexport default function PayslipTableAdmin() {\n  _s();\n\n  let history = useHistory();\n  const classes = useStyles();\n  const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\n  const {\n    payslips,\n    addPayslip,\n    payslips_loading,\n    updatePayslip,\n    deletePayslip,\n    loadPayslips,\n    getSinglePayslip,\n    getSingleBatchPayslip,\n    setEditPayslipID,\n    setIsPayslipEditingOn,\n    setIsPayslipEditingOff,\n    resetSinglePayslip,\n    payslip_period,\n    payslip_endmonthdate,\n    singlebatchpayslip,\n    singlebatch_payslip_loading,\n    singlebatch_payslip_error\n  } = usePayslipsContext();\n  const {\n    loadEmployees,\n    employees\n  } = useEmployeesContext();\n  useEffect(() => {\n    getSingleBatchPayslip(payslip_period);\n  }, []);\n\n  const update_Payslip = async data => {\n    const {\n      id\n    } = data;\n    setPayPeriodEmpId(id); //save to recoil\n\n    setEditPayslipID(id);\n    setIsPayslipEditingOn();\n    getSinglePayslip(id);\n    history.push(\"/singlepayslip\");\n  };\n\n  const add_Payslip = async data => {\n    const {\n      id\n    } = data;\n    resetSinglePayslip();\n    setEditPayslipID(\"\");\n    setIsPayslipEditingOff();\n    history.push(\"/singlepayslip\");\n  };\n\n  const delete_Payslip = data => {\n    const {\n      id\n    } = data;\n    setEditPayslipID(id);\n    deletePayslip(id);\n    loadPayslips();\n  };\n\n  const build_Payslip = () => {\n    const current_period = payslip_period;\n    const current_endmonthdate = Date.parse(payslip_endmonthdate); // loadEmployees();\n\n    console.log(current_period);\n    getSingleBatchPayslip(payslip_period);\n    const paydata = singlebatchpayslip.map(e => e.name) || [];\n    {\n      employees.map(emp => {\n        const {\n          id,\n          name,\n          bank_name,\n          bank_acno,\n          basic_salary,\n          nett_pay,\n          tap_acno,\n          tap_amount,\n          scp_acno,\n          scp_amount\n        } = emp;\n        const data = {\n          name: name,\n          period: current_period,\n          date: current_endmonthdate,\n          basic_pay: basic_salary,\n          nett_pay: nett_pay,\n          bank_name: bank_name,\n          bank_acno: bank_acno,\n          tap_acno: tap_acno,\n          tap_amount: tap_amount,\n          scp_acno: scp_acno,\n          scp_amount: scp_amount,\n          empid: id,\n          status: \"Pending\"\n        };\n\n        if (paydata) {\n          const res = paydata.includes(emp.name);\n\n          if (!res) {\n            console.log(\"add\", data);\n            addPayslip({ ...data\n            });\n          } else {\n            addPayslip({ ...data\n            });\n          }\n        }\n      });\n    }\n    getSingleBatchPayslip(payslip_period);\n  };\n\n  if (singlebatch_payslip_loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading.....Payslips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"100%\",\n        paddingTop: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        columns: columns,\n        data: singlebatchpayslip,\n        title: \"Payslips\",\n        icons: {\n          Add: props => /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this),\n          Edit: props => /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 30\n          }, this),\n          Delete: props => /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 32\n          }, this),\n          Clear: props => /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 31\n          }, this),\n          Check: props => /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 31\n          }, this),\n          Search: props => /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 32\n          }, this),\n          ResetSearch: props => /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 37\n          }, this),\n          Build: props => /*#__PURE__*/_jsxDEV(BuildOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 31\n          }, this)\n        },\n        editable: {\n          onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n            setTimeout(() => {\n              const dataUpdate = [...payslipsdata];\n              const index = oldData.tableData.id;\n              dataUpdate[index] = newData;\n              setPayslipsdata([...dataUpdate]); //approve_Expense(newData);\n\n              resolve();\n            }, 1000);\n          })\n        },\n        options: {\n          filtering: true,\n          headerStyle: {\n            backgroundColor: \"orange\",\n            color: \"#FFF\"\n          },\n          showTitle: true\n        },\n        components: {\n          Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                paddingLeft: 22\n              },\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: `Batch: ${payslip_period}      End Month: ${payslip_endmonthdate}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/payslip\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n                  fontSize: \"large\",\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PayslipTableAdmin, \"J55bxqWwF+FQDwRuJPkdU+SbbM8=\", false, function () {\n  return [useHistory, useStyles, useSetRecoilState, usePayslipsContext, useEmployeesContext];\n});\n\n_c = PayslipTableAdmin;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"PayslipTableAdmin\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/PayslipTableAdmin.js"],"names":["React","useEffect","MaterialTable","MTableToolbar","makeStyles","AddIcon","EditIcon","DeleteIcon","CheckIcon","SearchIcon","ArrowBackIcon","BuildOutlinedIcon","useHistory","Link","useSetRecoilState","useRecoilValue","payPeriodState","payPeriodEndMonthState","payPeriodEmpIdState","usePayslipsContext","useEmployeesContext","columns","title","field","editable","type","dateSetting","locale","cellStyle","width","maxWidth","editComponent","props","e","onChange","target","value","PayslipTableAdmin","history","classes","useStyles","setPayPeriodEmpId","payslips","addPayslip","payslips_loading","updatePayslip","deletePayslip","loadPayslips","getSinglePayslip","getSingleBatchPayslip","setEditPayslipID","setIsPayslipEditingOn","setIsPayslipEditingOff","resetSinglePayslip","payslip_period","payslip_endmonthdate","singlebatchpayslip","singlebatch_payslip_loading","singlebatch_payslip_error","loadEmployees","employees","update_Payslip","data","id","push","add_Payslip","delete_Payslip","build_Payslip","current_period","current_endmonthdate","Date","parse","console","log","paydata","map","name","emp","bank_name","bank_acno","basic_salary","nett_pay","tap_acno","tap_amount","scp_acno","scp_amount","period","date","basic_pay","empid","status","res","includes","root","paddingTop","Add","Edit","Delete","Clear","Check","Search","ResetSearch","Build","onRowUpdate","newData","oldData","Promise","resolve","reject","setTimeout","dataUpdate","payslipsdata","index","tableData","setPayslipsdata","filtering","headerStyle","backgroundColor","color","showTitle","Toolbar","paddingLeft","theme","padding"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport BuildOutlinedIcon from \"@material-ui/icons/BuildOutlined\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  payPeriodState,\r\n  payPeriodEndMonthState,\r\n  payPeriodEmpIdState,\r\n} from \"./data/atomdata\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Period\", field: \"period\", editable: \"never\" },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Basic Pay\",\r\n    field: \"basic_pay\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"TAP Amount\",\r\n    field: \"tap_amount\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"SCP Amount\",\r\n    field: \"scp_amount\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Earnings\",\r\n    field: \"total_earnings\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Deductions\",\r\n    field: \"total_deductions\",\r\n    type: \"currency\",\r\n    editable: \"never\",\r\n  },\r\n  { title: \"Nett Pay\", field: \"nett_pay\", type: \"currency\", editable: \"never\" },\r\n  // { title: \"Bank Name\", field: \"bank_name\" },\r\n  // { title: \"Bank AC No\", field: \"bank_accno\" },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    cellStyle: {\r\n      width: 50,\r\n      maxWidth: 50,\r\n    },\r\n    editComponent: (props) => (\r\n      <TextField\r\n        //defaultValue={props.value || null}\r\n        onChange={(e) => props.onChange(e.target.value)}\r\n        style={{ width: 100 }}\r\n        value={props.value}\r\n        select\r\n      >\r\n        <MenuItem value=\"Pending\">Pending</MenuItem>\r\n        <MenuItem value=\"Approve\">Approve</MenuItem>\r\n        <MenuItem value=\"Reject\">Reject</MenuItem>\r\n        <MenuItem value=\"Cancel\">Cancel</MenuItem>\r\n      </TextField>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function PayslipTableAdmin() {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const setPayPeriodEmpId = useSetRecoilState(payPeriodEmpIdState);\r\n  const {\r\n    payslips,\r\n    addPayslip,\r\n    payslips_loading,\r\n    updatePayslip,\r\n    deletePayslip,\r\n    loadPayslips,\r\n    getSinglePayslip,\r\n    getSingleBatchPayslip,\r\n    setEditPayslipID,\r\n    setIsPayslipEditingOn,\r\n    setIsPayslipEditingOff,\r\n    resetSinglePayslip,\r\n    payslip_period,\r\n    payslip_endmonthdate,\r\n    singlebatchpayslip,\r\n    singlebatch_payslip_loading,\r\n    singlebatch_payslip_error,\r\n  } = usePayslipsContext();\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n\r\n  useEffect(() => {\r\n    getSingleBatchPayslip(payslip_period);\r\n  }, []);\r\n\r\n  const update_Payslip = async (data) => {\r\n    const { id } = data;\r\n    setPayPeriodEmpId(id); //save to recoil\r\n    setEditPayslipID(id);\r\n    setIsPayslipEditingOn();\r\n    getSinglePayslip(id);\r\n    history.push(\"/singlepayslip\");\r\n  };\r\n\r\n  const add_Payslip = async (data) => {\r\n    const { id } = data;\r\n    resetSinglePayslip();\r\n    setEditPayslipID(\"\");\r\n    setIsPayslipEditingOff();\r\n    history.push(\"/singlepayslip\");\r\n  };\r\n\r\n  const delete_Payslip = (data) => {\r\n    const { id } = data;\r\n    setEditPayslipID(id);\r\n    deletePayslip(id);\r\n    loadPayslips();\r\n  };\r\n\r\n  const build_Payslip = () => {\r\n    const current_period = payslip_period;\r\n    const current_endmonthdate = Date.parse(payslip_endmonthdate);\r\n\r\n    // loadEmployees();\r\n    console.log(current_period);\r\n    getSingleBatchPayslip(payslip_period);\r\n    const paydata = singlebatchpayslip.map((e) => e.name) || [];\r\n\r\n    {\r\n      employees.map((emp) => {\r\n        const {\r\n          id,\r\n          name,\r\n          bank_name,\r\n          bank_acno,\r\n          basic_salary,\r\n          nett_pay,\r\n          tap_acno,\r\n          tap_amount,\r\n          scp_acno,\r\n          scp_amount,\r\n        } = emp;\r\n        const data = {\r\n          name: name,\r\n          period: current_period,\r\n          date: current_endmonthdate,\r\n          basic_pay: basic_salary,\r\n          nett_pay: nett_pay,\r\n          bank_name: bank_name,\r\n          bank_acno: bank_acno,\r\n          tap_acno: tap_acno,\r\n          tap_amount: tap_amount,\r\n          scp_acno: scp_acno,\r\n          scp_amount: scp_amount,\r\n          empid: id,\r\n          status: \"Pending\",\r\n        };\r\n        if (paydata) {\r\n          const res = paydata.includes(emp.name);\r\n          if (!res) {\r\n            console.log(\"add\", data);\r\n            addPayslip({ ...data });\r\n          } else {\r\n            addPayslip({ ...data });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    getSingleBatchPayslip(payslip_period);\r\n  };\r\n\r\n  if (singlebatch_payslip_loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading.....Payslips</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div style={{ maxWidth: \"100%\", paddingTop: \"5px\" }}>\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={singlebatchpayslip}\r\n          title=\"Payslips\"\r\n          icons={{\r\n            Add: (props) => <AddIcon />,\r\n            Edit: (props) => <EditIcon />,\r\n            Delete: (props) => <DeleteIcon />,\r\n            Clear: (props) => <DeleteIcon />,\r\n            Check: (props) => <CheckIcon />,\r\n            Search: (props) => <SearchIcon />,\r\n            ResetSearch: (props) => <DeleteIcon />,\r\n            Build: (props) => <BuildOutlinedIcon />,\r\n          }}\r\n          editable={{\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  const dataUpdate = [...payslipsdata];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = newData;\r\n                  setPayslipsdata([...dataUpdate]);\r\n                  //approve_Expense(newData);\r\n\r\n                  resolve();\r\n                }, 1000);\r\n              }),\r\n          }}\r\n          options={{\r\n            filtering: true,\r\n            headerStyle: {\r\n              backgroundColor: \"orange\",\r\n              color: \"#FFF\",\r\n            },\r\n            showTitle: true,\r\n          }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div>\r\n                <MTableToolbar {...props} />\r\n                <div style={{ paddingLeft: 22 }}>\r\n                  <h3>{`Batch: ${payslip_period}      End Month: ${payslip_endmonthdate}`}</h3>\r\n                </div>\r\n                {/* <div style={{ paddingLeft: 22 }}>\r\n                  <h3>{`End Month: ${payslip_endmonthdate}`}</h3>\r\n                </div> */}\r\n                <Link to=\"/payslip\">\r\n                  <div>\r\n                    <ArrowBackIcon fontSize=\"large\" color=\"primary\" />\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 0,\r\n  },\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}