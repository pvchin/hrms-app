{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\Payrun.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MaterialTable from \"material-table\";\nimport clsx from \"clsx\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Paper, Grid, Icon, Divider, TextField, MenuItem, NativeSelect, InputLabel } from \"@material-ui/core\";\nimport { useRecoilState } from \"recoil\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { payrunState } from \"./data/atomdata\"; //const drawerWidth = 240;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\",\n  cellStyle: {\n    width: 280,\n    maxWidth: 280\n  }\n}];\nconst selectmonths = [{\n  mth: \"January\"\n}, {\n  mth: \"February\"\n}, {\n  mth: \"March\"\n}, {\n  mth: \"April\"\n}, {\n  mth: \"May\"\n}, {\n  mth: \"June\"\n}, {\n  mth: \"July\"\n}, {\n  mth: \"August\"\n}, {\n  mth: \"September\"\n}, {\n  mth: \"October\"\n}, {\n  mth: \"November\"\n}, {\n  mth: \"December\"\n}];\n\nconst Payrun = () => {\n  _s();\n\n  let history = useHistory();\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\n  const {\n    loadEmployees,\n    employees\n  } = useEmployeesContext();\n  const {\n    addPayrun,\n    getPayrun,\n    payrun,\n    payrun_loading,\n    addPayslip,\n    resetPayslipsData,\n    singlebatchpayslip,\n    singlebatch_payslip_loading,\n    getSingleBatchPayslip,\n    setPayslipPeriod,\n    payslip_period\n  } = usePayslipsContext();\n  const [input, setInput] = useRecoilState(payrunState);\n  const [alert, setAlert] = useState(false);\n  const [error, setError] = useState(false);\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\n  useEffect(() => {\n    if (!payrun_loading) {\n      setLoadPaybatch(false);\n    }\n  }, [loadPaybatch]);\n\n  function formatDate(string) {\n    var options = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    };\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\n  }\n\n  function formatPayrun() {\n    const yy = input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\n    const mm = input.fromdate.substring(5, 7);\n    const d = input.fromdate;\n    console.log(\"payrun\", payrun);\n  }\n\n  const payrunExists = data => {\n    return payrun.some(function (el) {\n      return el.payrun === data;\n    });\n  };\n\n  const handleChange = e => {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handlePayrunSubmit = e => {\n    e.preventDefault();\n    const period = formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\n    const payrundata = input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\n    setInput({ ...input,\n      period: period,\n      payrun: payrundata\n    });\n    formatPayrun();\n    setPayslipPeriod(payrundata);\n    const isExist = payrunExists(payrundata);\n    console.log(\"isExist\", isExist);\n\n    if (isExist) {\n      console.log(\"exist\");\n      setIsPayrunExist(true);\n      setAlert(true);\n    } else {\n      console.log(\"add\");\n      add_Payrun(period, payrundata);\n      checkSelectedEmployees(period, payrundata);\n      setIsPayrunExist(false);\n      setAlert(true);\n      setLoadPaybatch(true);\n    }\n  };\n\n  const checkSelectedEmployees = (period, payrun) => {\n    console.log(\"checkselect\", employees);\n    resetPayslipsData(); //const paydata = singlebatchpayslip.map((e) => e.name) || [];\n\n    employees && employees.forEach((emp, index) => {\n      if (emp.tableData.checked) {\n        const {\n          id,\n          name,\n          bank_name,\n          bank_acno,\n          basic_salary,\n          tap_acno,\n          scp_acno\n        } = emp;\n        const data = {\n          name: name,\n          period: period,\n          pay_date: input.pay_date,\n          payrun: payrun,\n          wages: basic_salary,\n          nett_pay: 0,\n          bank_name: bank_name,\n          bank_acno: bank_acno,\n          tap_acno: tap_acno,\n          tap_amount: 0,\n          scp_acno: scp_acno,\n          scp_amount: 0,\n          total_allowances: 0,\n          total_deductions: 0,\n          empid: id,\n          status: \"Pending\",\n          allows_type1: \"Site Allowances\",\n          allows_type1amt: 0,\n          allows_type2: \"Expenses Claims\",\n          allows_type2amt: 0,\n          allows_type3: \" \",\n          allows_type3amt: 0,\n          allows_type4: \" \",\n          allows_type4amt: 0,\n          allows_type5: \" \",\n          allows_type5amt: 0,\n          allows_type6: \" \",\n          allows_type6amt: 0,\n          allows_type7: \" \",\n          allows_type7amt: 0,\n          allows_type8: \" \",\n          allows_type8amt: 0,\n          deducts_type1: \" \",\n          deducts_type1amt: 0,\n          deducts_type2: \" \",\n          deducts_type2amt: 0,\n          deducts_type3: \" \",\n          deducts_type3amt: 0,\n          deducts_type4: \" \",\n          deducts_type4amt: 0,\n          deducts_type5: \" \",\n          deducts_type5amt: 0,\n          deducts_type6: \" \",\n          deducts_type6amt: 0,\n          deducts_type7: \" \",\n          deducts_type7amt: 0,\n          deducts_type8: \" \",\n          deducts_type8amt: 0\n        }; // if (paydata) {\n        //   const res = paydata.includes(emp.name);\n        //   if (!res) {\n        //     addPayslip({ ...data });\n        //   }\n        // } else {\n        //   addPayslip({ ...data });\n        // }\n\n        addPayslip({ ...data\n        });\n      }\n    });\n  };\n\n  const handleNext = () => {\n    history.push(\"/payrunbatch\");\n  };\n\n  const add_Payrun = (period, payrun) => {\n    //update payrun\n    addPayrun({\n      pay_freq: input.payfreq,\n      from_date: input.fromdate,\n      to_date: input.todate,\n      pay_date: input.paydate,\n      period: period,\n      payrun: payrun,\n      status: \"Pending\"\n    });\n    getPayrun();\n  };\n\n  useEffect(() => {\n    loadEmployees();\n    getPayrun();\n  }, []); // useEffect(() => {\n  //   console.log(\"useEffect here\", input.payrun);\n  //   // getSingleBatchPayslip(input.payrun);\n  //   if (singlebatchpayslip) {\n  //     checkSelectedEmployees(input.period, input.payrun);\n  //     setLoadPaybatch(false);\n  //   }\n  // }, [loadPaybatch]);\n  //   useEffect(() => {\n  //     if (input.period && input.payrun) {\n  //       //add_Payrun();\n  //       setAlert(true);\n  //     }\n  //   }, [input]);\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: fixedHeightPaper,\n    style: {\n      backgroundColor: \"black\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.section,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        direction: \"row\",\n        container: true,\n        spacing: 1 // style={{ border: \"1px solid white\" }}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          sm: 3,\n          style: {\n            border: \"1px solid white\"\n          },\n          direction: \"column\",\n          align: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"article\", {\n            className: classes.jobinfo,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Pay Run\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handlePayrunSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"deduct-customized-native-simple\",\n                  className: classes.formLabel,\n                  children: \"Copy From\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(NativeSelect, {\n                  name: \"copyfrom\",\n                  value: \"New\",\n                  style: {\n                    padding: 4,\n                    marginLeft: 5,\n                    width: \"100%\",\n                    textAlign: \"left\"\n                  },\n                  onChange: e => handleChange(e),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"New\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 21\n                  }, this), payrun.map(row => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: row.payrun,\n                      children: row.payrun\n                    }, row.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 292,\n                      columnNumber: 25\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Pay Frequency\",\n                  variant: \"filled\",\n                  required: true,\n                  style: {\n                    width: \"100%\"\n                  },\n                  name: \"payfreq\",\n                  value: input.payfreq,\n                  onChange: e => handleChange(e) // select\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"deduct-customized-native-simple\",\n                  className: classes.formLabel,\n                  children: \"Month\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(NativeSelect, {\n                  name: \"selectmonth\",\n                  value: input.selectmonth,\n                  style: {\n                    padding: 4,\n                    marginLeft: 5,\n                    width: \"100%\",\n                    textAlign: \"left\"\n                  },\n                  onChange: e => handleChange(e),\n                  children: selectmonths.map(row => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: row.mth,\n                      children: row.payrun\n                    }, row.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 334,\n                      columnNumber: 25\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"From Date\",\n                  variant: \"filled\",\n                  name: \"fromdate\",\n                  type: \"date\",\n                  value: input.fromdate,\n                  required: true,\n                  style: {\n                    width: \"100%\"\n                  },\n                  onChange: e => handleChange(e),\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"To Date\",\n                  variant: \"filled\",\n                  type: \"date\",\n                  name: \"todate\",\n                  value: input.todate,\n                  required: true,\n                  onChange: e => handleChange(e),\n                  style: {\n                    width: \"100%\"\n                  },\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Payment Date\",\n                  variant: \"filled\",\n                  type: \"date\",\n                  name: \"paydate\",\n                  value: input.paydate,\n                  required: true,\n                  style: {\n                    width: \"100%\"\n                  },\n                  onChange: e => handleChange(e),\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"primary\",\n                  className: classes.button,\n                  children: [\"Submit \", /*#__PURE__*/_jsxDEV(Icon, {\n                    className: classes.rightIcon,\n                    children: \"send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 19\n                }, this), alert && !isPayrunExist && /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  color: \"primary\",\n                  className: classes.button,\n                  onClick: handleNext,\n                  children: [\"Next \", /*#__PURE__*/_jsxDEV(Icon, {\n                    className: classes.rightIcon,\n                    children: \"send\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [alert && !isPayrunExist && !singlebatch_payslip_loading && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"New Payrun being added!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 21\n                }, this), alert && isPayrunExist && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"This payrun already existed!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: error && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"This Payrun period already existed!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          orientation: \"vertical\",\n          flexItem: true,\n          style: {\n            background: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          sm: 3,\n          style: {\n            border: \"1px solid white\"\n          },\n          align: \"right\",\n          children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n            columns: columns,\n            data: employees,\n            title: \"Payrun History\",\n            options: {\n              filtering: false,\n              search: false,\n              toolbar: false,\n              selection: true,\n              headerStyle: {\n                backgroundColor: \"orange\",\n                color: \"primary\"\n              },\n              showTitle: false\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Payrun, \"adWvwdk74RZ5vuiePIYeisJa2Yk=\", false, function () {\n  return [useHistory, useStyles, useEmployeesContext, usePayslipsContext, useRecoilState];\n});\n\n_c = Payrun;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  container: {\n    margin: 0,\n    padding: 0,\n    width: \"80vw\",\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\n    gridAutoRows: \"10px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    justifyContent: \"center\",\n    backgroundColor: \"primary\"\n  },\n  fixedHeight: {\n    height: 800\n  },\n  paper: {\n    padding: theme.spacing(10),\n    // display: \"flex\",\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n    border: \"1px solid\",\n    width: \"100%\",\n    color: \"primary\",\n    bcakgroundColor: \"black\"\n  },\n  card: {\n    backgroundColor: \"black\"\n  },\n  section: {\n    width: \"95vw\",\n    margin: \"5rem auto\",\n    maxWidth: \"var(--max-width)\"\n  },\n  underline: {\n    width: \"5rem\",\n    height: \"0.25rem\",\n    marginBottom: \"1.25rem\",\n    background: \"var(--clr-primary-5)\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  title: {\n    marginbottom: \"4rem\",\n    textAlign: \"center\"\n  },\n  jobscenter: {\n    width: \"80vw\",\n    margin: \"0 auto\",\n    maxWidth: \"var(--max-width)\",\n    flexDirection: \"row\"\n  },\n  btncontainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginBottom: \"4rem\",\n    flexWrap: \"wrap\"\n  },\n  jobbtn: {\n    background: \"transparent\",\n    borderColor: \"transparent\",\n    textTransform: \"capitalize\",\n    fontSize: \"1.25rem\",\n    letterSpacing: \"var(--spacing)\",\n    margin: \"0 0.5rem\",\n    transition: \"var(--transition)\",\n    cursor: \"pointer\",\n    padding: \"0.25rem 0\",\n    lineHeight: \"1\",\n    outlineColor: \"var(--clr-primary-10)\",\n    \"&:hover\": {\n      color: \"var(--clr-primary-5)\",\n      boxShadow: \"0 2px var(--clr-primary-5)\"\n    }\n  },\n  activebtn: {\n    color: \"var(--clr-primary-5)\",\n    boxShadow: \"0 2px var(--clr-primary-5)\"\n  },\n  jobinfo: {\n    fontWeight: \"400\"\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  },\n  formLabel: {\n    fontSize: 12,\n    textAlign: \"left\",\n    marginLeft: 8,\n    marginTop: 5\n  }\n}));\nexport default Payrun;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payrun\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/Payrun.js"],"names":["React","useState","useEffect","makeStyles","MaterialTable","clsx","useHistory","Button","Paper","Grid","Icon","Divider","TextField","MenuItem","NativeSelect","InputLabel","useRecoilState","useEmployeesContext","usePayslipsContext","payrunState","columns","title","field","editable","cellStyle","width","maxWidth","selectmonths","mth","Payrun","history","classes","useStyles","fixedHeightPaper","paper","fixedHeight","loadPaybatch","setLoadPaybatch","loadEmployees","employees","addPayrun","getPayrun","payrun","payrun_loading","addPayslip","resetPayslipsData","singlebatchpayslip","singlebatch_payslip_loading","getSingleBatchPayslip","setPayslipPeriod","payslip_period","input","setInput","alert","setAlert","error","setError","isPayrunExist","setIsPayrunExist","formatDate","string","options","year","month","day","Date","toLocaleDateString","formatPayrun","yy","fromdate","substring","mm","d","console","log","payrunExists","data","some","el","handleChange","e","target","name","value","handlePayrunSubmit","preventDefault","period","todate","payrundata","isExist","add_Payrun","checkSelectedEmployees","forEach","emp","index","tableData","checked","id","bank_name","bank_acno","basic_salary","tap_acno","scp_acno","pay_date","wages","nett_pay","tap_amount","scp_amount","total_allowances","total_deductions","empid","status","allows_type1","allows_type1amt","allows_type2","allows_type2amt","allows_type3","allows_type3amt","allows_type4","allows_type4amt","allows_type5","allows_type5amt","allows_type6","allows_type6amt","allows_type7","allows_type7amt","allows_type8","allows_type8amt","deducts_type1","deducts_type1amt","deducts_type2","deducts_type2amt","deducts_type3","deducts_type3amt","deducts_type4","deducts_type4amt","deducts_type5","deducts_type5amt","deducts_type6","deducts_type6amt","deducts_type7","deducts_type7amt","deducts_type8","deducts_type8amt","handleNext","push","pay_freq","payfreq","from_date","to_date","paydate","backgroundColor","section","border","jobinfo","formLabel","padding","marginLeft","textAlign","map","row","selectmonth","shrink","button","rightIcon","background","filtering","search","toolbar","selection","headerStyle","color","showTitle","theme","root","flexGrow","margin","spacing","container","display","gridTemplateColumns","gridAutoRows","position","left","transform","justifyContent","height","overflow","flexDirection","bcakgroundColor","card","underline","marginBottom","marginRight","marginbottom","jobscenter","btncontainer","flexWrap","jobbtn","borderColor","textTransform","fontSize","letterSpacing","transition","cursor","lineHeight","outlineColor","boxShadow","activebtn","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport clsx from \"clsx\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Icon,\r\n  Divider,\r\n  TextField,\r\n  MenuItem,\r\n  NativeSelect,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { payrunState } from \"./data/atomdata\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 280,\r\n      maxWidth: 280,\r\n    },\r\n  },\r\n];\r\n\r\nconst selectmonths = [\r\n  { mth: \"January\" },\r\n  { mth: \"February\" },\r\n  { mth: \"March\" },\r\n  { mth: \"April\" },\r\n  { mth: \"May\" },\r\n  { mth: \"June\" },\r\n  { mth: \"July\" },\r\n  { mth: \"August\" },\r\n  { mth: \"September\" },\r\n  { mth: \"October\" },\r\n  { mth: \"November\" },\r\n  { mth: \"December\" },\r\n];\r\n\r\nconst Payrun = () => {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const {\r\n    addPayrun,\r\n    getPayrun,\r\n    payrun,\r\n    payrun_loading,\r\n    addPayslip,\r\n    resetPayslipsData,\r\n    singlebatchpayslip,\r\n    singlebatch_payslip_loading,\r\n    getSingleBatchPayslip,\r\n    setPayslipPeriod,\r\n    payslip_period,\r\n  } = usePayslipsContext();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [alert, setAlert] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!payrun_loading) {\r\n      setLoadPaybatch(false);\r\n    }\r\n  }, [loadPaybatch]);\r\n\r\n  function formatDate(string) {\r\n    var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\r\n  }\r\n\r\n  function formatPayrun() {\r\n    const yy =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    const mm = input.fromdate.substring(5, 7);\r\n    const d = input.fromdate;\r\n    console.log(\"payrun\", payrun);\r\n  }\r\n\r\n  const payrunExists = (data) => {\r\n    return payrun.some(function (el) {\r\n      return el.payrun === data;\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePayrunSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const period =\r\n      formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\r\n    const payrundata =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({ ...input, period: period, payrun: payrundata });\r\n    formatPayrun();\r\n    setPayslipPeriod(payrundata);\r\n    const isExist = payrunExists(payrundata);\r\n    console.log(\"isExist\", isExist);\r\n    if (isExist) {\r\n      console.log(\"exist\");\r\n      setIsPayrunExist(true);\r\n      setAlert(true);\r\n    } else {\r\n      console.log(\"add\");\r\n      add_Payrun(period, payrundata);\r\n      checkSelectedEmployees(period, payrundata);\r\n      setIsPayrunExist(false);\r\n      setAlert(true);\r\n      setLoadPaybatch(true);\r\n    }\r\n  };\r\n\r\n  const checkSelectedEmployees = (period, payrun) => {\r\n    console.log(\"checkselect\", employees);\r\n    resetPayslipsData();\r\n    //const paydata = singlebatchpayslip.map((e) => e.name) || [];\r\n\r\n    employees &&\r\n      employees.forEach((emp, index) => {\r\n        if (emp.tableData.checked) {\r\n          const {\r\n            id,\r\n            name,\r\n            bank_name,\r\n            bank_acno,\r\n            basic_salary,\r\n            tap_acno,\r\n            scp_acno,\r\n          } = emp;\r\n          const data = {\r\n            name: name,\r\n            period: period,\r\n            pay_date: input.pay_date,\r\n            payrun: payrun,\r\n            wages: basic_salary,\r\n            nett_pay: 0,\r\n            bank_name: bank_name,\r\n            bank_acno: bank_acno,\r\n            tap_acno: tap_acno,\r\n            tap_amount: 0,\r\n            scp_acno: scp_acno,\r\n            scp_amount: 0,\r\n            total_allowances: 0,\r\n            total_deductions: 0,\r\n            empid: id,\r\n            status: \"Pending\",\r\n            allows_type1: \"Site Allowances\",\r\n            allows_type1amt: 0,\r\n            allows_type2: \"Expenses Claims\",\r\n            allows_type2amt: 0,\r\n            allows_type3: \" \",\r\n            allows_type3amt: 0,\r\n            allows_type4: \" \",\r\n            allows_type4amt: 0,\r\n            allows_type5: \" \",\r\n            allows_type5amt: 0,\r\n            allows_type6: \" \",\r\n            allows_type6amt: 0,\r\n            allows_type7: \" \",\r\n            allows_type7amt: 0,\r\n            allows_type8: \" \",\r\n            allows_type8amt: 0,\r\n            deducts_type1: \" \",\r\n            deducts_type1amt: 0,\r\n            deducts_type2: \" \",\r\n            deducts_type2amt: 0,\r\n            deducts_type3: \" \",\r\n            deducts_type3amt: 0,\r\n            deducts_type4: \" \",\r\n            deducts_type4amt: 0,\r\n            deducts_type5: \" \",\r\n            deducts_type5amt: 0,\r\n            deducts_type6: \" \",\r\n            deducts_type6amt: 0,\r\n            deducts_type7: \" \",\r\n            deducts_type7amt: 0,\r\n            deducts_type8: \" \",\r\n            deducts_type8amt: 0,\r\n          };\r\n          // if (paydata) {\r\n          //   const res = paydata.includes(emp.name);\r\n          //   if (!res) {\r\n          //     addPayslip({ ...data });\r\n          //   }\r\n          // } else {\r\n          //   addPayslip({ ...data });\r\n          // }\r\n          addPayslip({ ...data });\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    history.push(\"/payrunbatch\");\r\n  };\r\n\r\n  const add_Payrun = (period, payrun) => {\r\n    //update payrun\r\n    addPayrun({\r\n      pay_freq: input.payfreq,\r\n      from_date: input.fromdate,\r\n      to_date: input.todate,\r\n      pay_date: input.paydate,\r\n      period: period,\r\n      payrun: payrun,\r\n      status: \"Pending\",\r\n    });\r\n    getPayrun();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    getPayrun();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"useEffect here\", input.payrun);\r\n\r\n  //   // getSingleBatchPayslip(input.payrun);\r\n  //   if (singlebatchpayslip) {\r\n  //     checkSelectedEmployees(input.period, input.payrun);\r\n  //     setLoadPaybatch(false);\r\n  //   }\r\n  // }, [loadPaybatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (input.period && input.payrun) {\r\n  //       //add_Payrun();\r\n\r\n  //       setAlert(true);\r\n  //     }\r\n  //   }, [input]);\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"black\" }}>\r\n      <section className={classes.section}>\r\n        <Grid\r\n          direction=\"row\"\r\n          container\r\n          spacing={1}\r\n          // style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid white\" }}\r\n            direction=\"column\"\r\n            align=\"left\"\r\n          >\r\n            <article className={classes.jobinfo}>\r\n              <h2>Pay Run</h2>\r\n              <form onSubmit={handlePayrunSubmit}>\r\n                <div>\r\n                  <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Copy From\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"copyfrom\"\r\n                    value={\"New\"}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    <option value=\"\">New</option>\r\n                    {payrun.map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.payrun}>\r\n                          {row.payrun}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Pay Frequency\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"payfreq\"\r\n                    value={input.payfreq}\r\n                    onChange={(e) => handleChange(e)}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Weekly\">Weekly</MenuItem> */}\r\n                    {/* <MenuItem value=\"Monthly\">Monthly</MenuItem> */}\r\n                  </TextField>\r\n                </div>\r\n                <div>\r\n                  <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Month\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"selectmonth\"\r\n                    value={input.selectmonth}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    {selectmonths.map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.mth}>\r\n                          {row.payrun}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    variant=\"filled\"\r\n                    name=\"fromdate\"\r\n                    type=\"date\"\r\n                    value={input.fromdate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"todate\"\r\n                    value={input.todate}\r\n                    required\r\n                    onChange={(e) => handleChange(e)}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Payment Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"paydate\"\r\n                    value={input.paydate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                  >\r\n                    Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                  </Button>\r\n                  {alert && !isPayrunExist && (\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={handleNext}\r\n                    >\r\n                      Next <Icon className={classes.rightIcon}>send</Icon>\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {alert && !isPayrunExist && !singlebatch_payslip_loading && (\r\n                    <h3>New Payrun being added!</h3>\r\n                  )}\r\n                  {alert && isPayrunExist && (\r\n                    <h3>This payrun already existed!</h3>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {error && <h3>This Payrun period already existed!</h3>}\r\n                </div>\r\n              </form>\r\n            </article>\r\n          </Grid>\r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            style={{ background: \"white\" }}\r\n          />\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid white\" }}\r\n            align=\"right\"\r\n          >\r\n            <MaterialTable\r\n              columns={columns}\r\n              data={employees}\r\n              title=\"Payrun History\"\r\n              options={{\r\n                filtering: false,\r\n                search: false,\r\n                toolbar: false,\r\n                selection: true,\r\n\r\n                headerStyle: {\r\n                  backgroundColor: \"orange\",\r\n                  color: \"primary\",\r\n                },\r\n                showTitle: false,\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </section>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default Payrun;\r\n"]},"metadata":{},"sourceType":"module"}